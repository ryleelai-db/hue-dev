// Licensed to Cloudera, Inc. under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  Cloudera, Inc. licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/* parser generated by jison 0.4.17 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
import SqlParseSupport from 'parse/sql/databricks/sqlParseSupport';

var databricksSyntaxParser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[4,8,12,16,34,163,175,242,272,322,338,341,345],$V1=[2,625],$V2=[341,345],$V3=[2,626],$V4=[1,36],$V5=[1,28],$V6=[1,29],$V7=[1,18],$V8=[1,19],$V9=[1,37],$Va=[1,34],$Vb=[1,35],$Vc=[1,30],$Vd=[1,33],$Ve=[1,31],$Vf=[1,46],$Vg=[1,48],$Vh=[1,44],$Vi=[1,47],$Vj=[1,43],$Vk=[82,341,345],$Vl=[2,452],$Vm=[1,54],$Vn=[1,62],$Vo=[1,63],$Vp=[1,76],$Vq=[2,414],$Vr=[1,81],$Vs=[1,82],$Vt=[32,268],$Vu=[16,32,44,51,55,56,64,78,80,82,86,96,108,109,110,113,114,121,126,130,141,143,155,183,191,202,215,216,217,218,219,220,221,222,223,227,229,233,240,241,254,263,265,268,341,345,349,350,353,357,358,359,360,361,362,364,367,368,369,370,372,375,376,377,378,380,381,383,385,386,387,388,389,392,393,406,440],$Vv=[82,263,341,345],$Vw=[64,114,229,341,345,349,350],$Vx=[2,782],$Vy=[1,96],$Vz=[64,114,229,349,350,359],$VA=[64,114,229,307,341,345,349,350,359],$VB=[2,779],$VC=[1,101],$VD=[16,64,114,229,349,350,359],$VE=[80,86,242],$VF=[1,167],$VG=[1,168],$VH=[1,123],$VI=[1,118],$VJ=[1,129],$VK=[1,131],$VL=[1,133],$VM=[1,116],$VN=[1,165],$VO=[1,169],$VP=[1,170],$VQ=[1,134],$VR=[1,156],$VS=[1,157],$VT=[1,158],$VU=[1,159],$VV=[1,160],$VW=[1,161],$VX=[1,162],$VY=[1,163],$VZ=[1,149],$V_=[1,150],$V$=[1,143],$V01=[1,132],$V11=[1,144],$V21=[1,119],$V31=[1,121],$V41=[1,120],$V51=[1,124],$V61=[1,122],$V71=[1,164],$V81=[1,166],$V91=[55,56,64,80,82,96,97,108,113,114,229,242,254,268,270,271,272,295,296,297,298,299,300,301,302,303,304,305,307,308,349,350,352,353,356,359,363,371,390,391],$Va1=[82,86,183,263,341,345],$Vb1=[2,1101],$Vc1=[1,222],$Vd1=[1,237],$Ve1=[1,238],$Vf1=[1,226],$Vg1=[1,223],$Vh1=[1,224],$Vi1=[1,225],$Vj1=[1,232],$Vk1=[1,231],$Vl1=[1,230],$Vm1=[1,233],$Vn1=[1,228],$Vo1=[1,227],$Vp1=[1,221],$Vq1=[1,229],$Vr1=[1,240],$Vs1=[1,239],$Vt1=[32,44,55,56,64,78,82,86,96,109,110,114,130,143,183,191,202,215,216,217,218,219,220,221,222,227,229,233,240,241,254,263,265,341,345,349,350,353,357,358,359,360,369,370,375,377,378,380,381,383,387,393,440],$Vu1=[1,246],$Vv1=[1,252],$Vw1=[1,254],$Vx1=[32,44,55,56,64,78,80,82,86,96,109,110,114,130,143,183,191,202,215,216,217,218,219,220,221,222,227,229,233,240,241,254,263,265,341,345,349,350,353,357,358,359,360,369,370,375,377,378,380,381,383,387,393,440],$Vy1=[1,259],$Vz1=[32,44,51,55,56,64,78,80,82,86,96,109,110,114,130,143,183,191,202,215,216,217,218,219,220,221,222,227,229,233,240,241,254,263,265,268,341,345,349,350,353,357,358,359,360,369,370,375,377,378,380,381,383,387,393,440],$VA1=[32,44,55,56,64,78,82,86,96,109,110,114,130,143,183,191,202,215,216,217,218,219,220,221,222,227,229,233,240,241,254,263,265,319,341,345,349,350,353,357,358,359,360,369,370,375,377,378,380,381,383,387,393,440],$VB1=[44,55,56,64,82,86,114,126,141,155,191,202,215,216,217,218,219,220,221,222,223,227,229,233,263,265,341,345,349,350,359],$VC1=[44,51,82,86,96,97,110,183,191,202,215,216,217,218,219,220,221,222,223,227,233,263,265,341,345],$VD1=[82,86],$VE1=[2,47],$VF1=[1,287],$VG1=[44,341,345],$VH1=[44,126,341,345],$VI1=[44,51,78,80,126,341,345],$VJ1=[44,51],$VK1=[265,341,345],$VL1=[86,183,265,341,345],$VM1=[32,51,82,86],$VN1=[175,242],$VO1=[2,1079],$VP1=[82,191,202,227,233,263,341,345],$VQ1=[2,465],$VR1=[1,315],$VS1=[97,248,270,271],$VT1=[82,86,183,191,202,215,216,217,218,219,220,221,222,223,227,233,263,265,341,345],$VU1=[44,55,56,64,82,86,96,114,130,183,191,202,215,216,217,218,219,220,221,222,227,229,233,240,241,263,265,341,345,349,350,357,359,360,369,370,378,383,387,393,440],$VV1=[32,44,55,56,64,82,86,96,109,110,114,130,143,183,191,202,215,216,217,218,219,220,221,222,227,229,233,240,241,254,263,265,341,345,349,350,353,357,358,359,360,369,370,378,383,387,393,440],$VW1=[369,370,393],$VX1=[55,56,64,80,96,97,108,113,114,229,268,270,271,272,295,296,297,298,299,300,301,302,303,304,305,307,308,349,350,352,353,356,359,363,371,390,391],$VY1=[32,44,51,55,56,64,78,82,86,96,97,109,110,114,130,143,183,191,202,215,216,217,218,219,220,221,222,223,227,229,233,240,241,254,263,265,341,345,349,350,353,357,358,359,360,369,370,375,377,378,380,381,383,387,393,440],$VZ1=[82,202,227,233,263,341,345],$V_1=[82,86,191,202,227,233,263,265,341,345],$V$1=[1,416],$V02=[1,419],$V12=[1,417],$V22=[1,421],$V32=[1,418],$V42=[1,420],$V52=[1,423],$V62=[1,422],$V72=[82,86,191,202,215,216,217,218,219,220,221,222,223,227,233,263,265,341,345],$V82=[44,55,56,64,82,86,114,191,202,215,216,217,218,219,220,221,222,223,227,229,233,263,265,341,345,349,350,359],$V92=[32,44,55,56,64,82,86,96,109,110,114,130,143,183,191,202,215,216,217,218,219,220,221,222,227,229,233,240,241,263,265,341,345,349,350,357,359,360,369,370,378,383,387,393,440],$Va2=[44,55,56,64,82,86,114,130,183,191,202,215,216,217,218,219,220,221,222,227,229,233,240,241,263,265,341,345,349,350,357,359,369,370,378,383,387,393,440],$Vb2=[1,441],$Vc2=[82,233],$Vd2=[1,455],$Ve2=[1,481],$Vf2=[1,482],$Vg2=[1,483],$Vh2=[1,469],$Vi2=[1,470],$Vj2=[1,471],$Vk2=[1,472],$Vl2=[1,473],$Vm2=[1,474],$Vn2=[1,475],$Vo2=[1,476],$Vp2=[1,477],$Vq2=[1,478],$Vr2=[1,479],$Vs2=[1,480],$Vt2=[82,227,233,263,341,345],$Vu2=[64,80,114,229,349,350,359],$Vv2=[1,515],$Vw2=[82,86,233],$Vx2=[32,44,55,56,64,78,82,86,96,109,110,114,130,143,183,191,202,215,216,217,218,219,220,221,222,223,227,229,233,240,241,254,263,265,341,345,349,350,353,357,358,359,360,369,370,375,377,378,380,381,383,387,393,440],$Vy2=[1,523],$Vz2=[86,341,345],$VA2=[1,539],$VB2=[1,540],$VC2=[51,82,86,96,97,110],$VD2=[2,891],$VE2=[1,543],$VF2=[82,227,263,341,345],$VG2=[82,86,191,202,215,216,217,218,219,220,221,222,227,233,263,265,341,345],$VH2=[2,373],$VI2=[1,559],$VJ2=[51,82,86,96,97],$VK2=[82,86,202,227,233,263,341,345],$VL2=[360,495],$VM2=[1,615],$VN2=[86,110],$VO2=[82,357,365,390,495],$VP2=[2,1137],$VQ2=[82,86,130,227,263,341,345,383],$VR2=[82,357],$VS2=[2,1147],$VT2=[1,648],$VU2=[1,649],$VV2=[1,650],$VW2=[1,658],$VX2=[1,659],$VY2=[2,1152],$VZ2=[1,666],$V_2=[373,379],$V$2=[2,197],$V03=[2,198];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"DataDefinition_EDIT":3,"ALTER":4,"CURSOR":5,"AlterTable_EDIT":6,"AlterView_EDIT":7,"CREATE":8,"DatabaseDefinition_EDIT":9,"TableDefinition_EDIT":10,"ViewDefinition_EDIT":11,"DROP":12,"DropDatabaseStatement_EDIT":13,"DropTableStatement_EDIT":14,"DropViewStatement_EDIT":15,"SET":16,"TruncateTableStatement_EDIT":17,"UseStatement_EDIT":18,"DataDefinition":19,"AlterTable":20,"AlterView":21,"DatabaseDefinition":22,"RoleDefinition":23,"TableDefinition":24,"ViewDefinition":25,"DropDatabaseStatement":26,"DropRoleStatement":27,"DropTableStatement":28,"DropViewStatement":29,"ALL":30,"SetOption":31,"=":32,"SetValue":33,"RESET":34,"TruncateTableStatement":35,"UseStatement":36,"AlterTableLeftSide":37,"PartitionSpec":38,"AlterTableLeftSide_EDIT":39,"TABLE":40,"SchemaQualifiedTableIdentifier":41,"SchemaQualifiedTableIdentifier_EDIT":42,"AlterViewLeftSide":43,"AS":44,"QuerySpecification":45,"AlterViewLeftSide_EDIT":46,"QuerySpecification_EDIT":47,"VIEW":48,"OptionalComment":49,"Comment":50,"COMMENT":51,"QuotedValue":52,"OptionalComment_INVALID":53,"Comment_INVALID":54,"SINGLE_QUOTE":55,"DOUBLE_QUOTE":56,"VALUE":57,"DatabaseOrSchema":58,"OptionalIfNotExists":59,"RegularIdentifier":60,"DatabaseDefinitionOptionals":61,"OptionalIfNotExists_EDIT":62,"DatabaseDefinitionOptionals_EDIT":63,"ROLE":64,"TableDefinitionRightPart":65,"TableDefinitionRightPart_EDIT":66,"TableIdentifierAndOptionalColumnSpecification":67,"OptionalPartitionedBy":68,"OptionalAsSelectStatement":69,"TableIdentifierAndOptionalColumnSpecification_EDIT":70,"PartitionedBy_EDIT":71,"OptionalAsSelectStatement_EDIT":72,"SchemaQualifiedIdentifier":73,"OptionalColumnSpecificationsOrLike":74,"OptionalColumnSpecificationsOrLike_EDIT":75,"SchemaQualifiedIdentifier_EDIT":76,"ParenthesizedColumnSpecificationList":77,"LIKE":78,"ParenthesizedColumnSpecificationList_EDIT":79,"(":80,"ColumnSpecificationList":81,")":82,"ColumnSpecificationList_EDIT":83,"RightParenthesisOrError":84,"ColumnSpecification":85,",":86,"ColumnSpecification_EDIT":87,"ColumnIdentifier":88,"ColumnDataType":89,"OptionalColumnOptions":90,"ColumnDataType_EDIT":91,"ColumnOptions_EDIT":92,"ColumnOptions":93,"ColumnOption":94,"ColumnOption_EDIT":95,"NOT":96,"NULL":97,"PrimitiveType":98,"ArrayType":99,"MapType":100,"StructType":101,"ArrayType_INVALID":102,"MapType_INVALID":103,"StructType_INVALID":104,"ArrayType_EDIT":105,"MapType_EDIT":106,"StructType_EDIT":107,"ARRAY":108,"<":109,">":110,"AnyCursor":111,"GreaterThanOrError":112,"MAP":113,"STRUCT":114,"StructDefinitionList":115,"StructDefinitionList_EDIT":116,"StructDefinition":117,"StructDefinition_EDIT":118,"Commas":119,"RegularOrBacktickedIdentifier":120,":":121,"ColumnDataTypeList":122,"ColumnDataTypeList_EDIT":123,"ColumnDataTypeListInner_EDIT":124,"PartitionedBy":125,"PARTITION":126,"BY":127,"RangeClause":128,"RangeClause_EDIT":129,"RANGE":130,"ParenthesizedColumnList":131,"ParenthesizedPartitionValuesList":132,"ParenthesizedColumnList_EDIT":133,"ParenthesizedPartitionValuesList_EDIT":134,"PartitionValueList":135,"PartitionValueList_EDIT":136,"PartitionValue":137,"PartitionValue_EDIT":138,"ValueExpression":139,"LessThanOrEqualTo":140,"VALUES":141,"ValueExpression_EDIT":142,"COMPARISON_OPERATOR":143,"CommitLocations":144,"OptionalParenthesizedViewColumnList":145,"ParenthesizedViewColumnList_EDIT":146,"ParenthesizedViewColumnList":147,"ViewColumnList":148,"ViewColumnList_EDIT":149,"ColumnReference":150,"OptionalIfExists":151,"OptionalCascade":152,"OptionalIfExists_EDIT":153,"OptionalPurge":154,"PURGE":155,"DataManipulation":156,"InsertStatement":157,"UpdateStatement":158,"InsertValuesStatement":159,"DataManipulation_EDIT":160,"InsertValuesStatement_EDIT":161,"UpdateStatement_EDIT":162,"INSERT":163,"INTO":164,"OptionalTable":165,"InsertValuesList":166,"ParenthesizedRowValuesList":167,"InValueList":168,"CommonTableExpression":169,"SelectStatement":170,"OptionalUnions":171,"SelectStatement_EDIT":172,"OptionalUnions_EDIT":173,"CommonTableExpression_EDIT":174,"WITH":175,"WithQueries":176,"WithQueries_EDIT":177,"WithQuery":178,"WithQuery_EDIT":179,"TableSubQueryInner":180,"TableSubQueryInner_EDIT":181,"FromClause":182,"FROM":183,"TableReferenceList":184,"FromClause_EDIT":185,"TableReferenceList_EDIT":186,"TableReference":187,"TableReference_EDIT":188,"OptionalGroupByClause":189,"GroupByClause":190,"GROUP":191,"GroupByColumnList":192,"GroupByClause_EDIT":193,"GroupByColumnList_EDIT":194,"ColumnGroupingSets":195,"ColumnGroupingSets_EDIT":196,"ColumnGroupingSet_EDIT":197,"ColumnReference_EDIT":198,"GroupByColumnListPartTwo_EDIT":199,"OptionalHavingClause":200,"HavingClause":201,"HAVING":202,"HavingClause_EDIT":203,"OptionalJoins":204,"Joins":205,"Joins_INVALID":206,"JoinType":207,"TablePrimary":208,"OptionalJoinCondition":209,"Join_EDIT":210,"JoinType_EDIT":211,"TablePrimary_EDIT":212,"JoinCondition_EDIT":213,"Joins_EDIT":214,"CROSS":215,"JOIN":216,"FULL":217,"OUTER":218,"INNER":219,"LEFT":220,"SEMI":221,"RIGHT":222,"ON":223,"UsingColList":224,"OptionalLimitClause":225,"LimitClause":226,"LIMIT":227,"UnsignedNumericLiteral":228,"VARIABLE_REFERENCE":229,"LimitClause_EDIT":230,"OptionalOrderByClause":231,"OrderByClause":232,"ORDER":233,"OrderByColumnList":234,"OrderByClause_EDIT":235,"OrderByColumnList_EDIT":236,"OrderByIdentifier":237,"OrderByIdentifier_EDIT":238,"OptionalAscOrDesc":239,"ASC":240,"DESC":241,"SELECT":242,"OptionalAllOrDistinct":243,"SelectList":244,"TableExpression":245,"SelectList_EDIT":246,"TableExpression_EDIT":247,"DISTINCT":248,"OptionalSelectConditions":249,"OptionalSelectConditions_EDIT":250,"SelectSpecification":251,"SelectSpecification_EDIT":252,"OptionalCorrelationName":253,"*":254,"OptionalCorrelationName_EDIT":255,"OptionalWhereClause":256,"WhereClause_EDIT":257,"WhereClause":258,"Unions":259,"Unions_EDIT":260,"UnionClause":261,"UnionClause_EDIT":262,"UNION":263,"NewStatement":264,"WHERE":265,"SearchCondition":266,"SearchCondition_EDIT":267,".":268,"SignedInteger":269,"TRUE":270,"FALSE":271,"TRUNCATE":272,"OptionalPartitionSpec":273,"UserDefinedFunction":274,"AggregateFunction":275,"OptionalOverClause":276,"AnalyticFunction":277,"OverClause":278,"CastFunction":279,"UserDefinedFunction_EDIT":280,"AggregateFunction_EDIT":281,"OptionalOverClause_EDIT":282,"AnalyticFunction_EDIT":283,"OverClause_EDIT":284,"CastFunction_EDIT":285,"OtherAggregateFunction":286,"CountFunction":287,"SumFunction":288,"OtherAggregateFunction_EDIT":289,"CountFunction_EDIT":290,"SumFunction_EDIT":291,"OtherAggregateFunction_Type":292,"UdfArgumentList":293,"UdfArgumentList_EDIT":294,"AVG":295,"MAX":296,"MIN":297,"STDDEV_POP":298,"STDDEV_SAMP":299,"VAR_POP":300,"VAR_SAMP":301,"VARIANCE":302,"COUNT":303,"SUM":304,"ANALYTIC":305,"ArbitraryFunctionName":306,"IF":307,"CAST":308,"NonParenthesizedValueExpressionPrimary":309,"ColumnOrArbitraryFunctionRef":310,"ArbitraryFunctionRightPart":311,"UnsignedValueSpecification":312,"NonParenthesizedValueExpressionPrimary_EDIT":313,"ArbitraryFunctionRightPart_EDIT":314,"UnsignedValueSpecification_EDIT":315,"ColumnOrArbitraryFunctionRef_EDIT":316,"ArbitraryFunction":317,"ArbitraryFunction_EDIT":318,"OVER":319,"WindowExpression":320,"WindowExpression_EDIT":321,"UPDATE":322,"TargetTable":323,"SetClauseList":324,"OptionalFromJoinedTable":325,"TargetTable_EDIT":326,"SetClauseList_EDIT":327,"FromJoinedTable_EDIT":328,"TableName":329,"TableName_EDIT":330,"LocalOrSchemaQualifiedName":331,"LocalOrSchemaQualifiedName_EDIT":332,"SetClause":333,"SetClause_EDIT":334,"SetTarget":335,"UpdateSource":336,"UpdateSource_EDIT":337,"USE":338,"SqlSyntax":339,"SqlStatements":340,"EOF":341,"SqlAutocomplete":342,"SqlStatements_EDIT":343,"SqlStatement":344,";":345,"SqlStatement_EDIT":346,"SetSpecification_EDIT":347,"NonReservedKeyword":348,"OPTION":349,"REGULAR_IDENTIFIER":350,"NonStartingToken":351,"!":352,"-":353,"[":354,"]":355,"~":356,"AND":357,"ARITHMETIC_OPERATOR":358,"BACKTICK":359,"BETWEEN":360,"BIGINT":361,"BOOLEAN":362,"CASE":363,"CHAR":364,"CURRENT":365,"DATABASE":366,"DECIMAL":367,"DOUBLE":368,"ELSE":369,"END":370,"EXISTS":371,"FLOAT":372,"FOLLOWING":373,"HDFS_START_QUOTE":374,"IN":375,"INT":376,"IS":377,"OR":378,"PRECEDING":379,"REGEXP":380,"RLIKE":381,"ROW":382,"ROWS":383,"SCHEMA":384,"SMALLINT":385,"STRING":386,"THEN":387,"TIMESTAMP":388,"TINYINT":389,"UNSIGNED_INTEGER":390,"UNSIGNED_INTEGER_E":391,"VARCHAR":392,"WHEN":393,"PARTIAL_CURSOR":394,"FromOrIn":395,"SingleQuotedValue":396,"SingleQuotedValue_EDIT":397,"PARTIAL_VALUE":398,"DoubleQuotedValue":399,"DoubleQuotedValue_EDIT":400,"QuotedValue_EDIT":401,"OptionalFromDatabase":402,"DatabaseIdentifier":403,"OptionalFromDatabase_EDIT":404,"DatabaseIdentifier_EDIT":405,"CASCADE":406,"OptionalInDatabase":407,"OptionalPartitionSpec_EDIT":408,"PartitionSpec_EDIT":409,"PartitionSpecList":410,"PartitionSpecList_EDIT":411,"RangePartitionSpec":412,"RangePartitionComparisonOperator":413,"RangePartitionSpec_EDIT":414,"ConfigurationName":415,"PartialBacktickedOrAnyCursor":416,"PartialBacktickedIdentifier":417,"PartialBacktickedOrCursor":418,"PartialBacktickedOrPartialCursor":419,"OptionalParenthesizedColumnList":420,"OptionalParenthesizedColumnList_EDIT":421,"ColumnList":422,"ColumnList_EDIT":423,"ParenthesizedSimpleValueList":424,"SimpleValueList":425,"PartitionExpression":426,"PartitionExpression_EDIT":427,"RegularOrBackTickedSchemaQualifiedName":428,"RegularOrBackTickedSchemaQualifiedName_EDIT":429,"BasicIdentifierChain":430,"BasicIdentifierChain_EDIT":431,"DerivedColumnChain":432,"DerivedColumnChain_EDIT":433,"PartialBacktickedIdentifierOrPartialCursor":434,"OptionalTypeLength":435,"OptionalTypePrecision":436,"OptionalNot":437,"TableSubQuery":438,"ValueExpressionList":439,"BETWEEN_AND":440,"LikeRightPart":441,"CaseRightPart":442,"TableSubQuery_EDIT":443,"ValueExpressionInSecondPart_EDIT":444,"LikeRightPart_EDIT":445,"CaseRightPart_EDIT":446,"EndOrError":447,"ValueExpressionList_EDIT":448,"+":449,"UnsignedLiteral":450,"UnsignedLiteral_EDIT":451,"GeneralLiteral":452,"GeneralLiteral_EDIT":453,"ExactNumericLiteral":454,"ApproximateNumericLiteral":455,"TruthValue":456,"TablePrimaryOrJoinedTable":457,"TablePrimaryOrJoinedTable_EDIT":458,"JoinedTable":459,"JoinedTable_EDIT":460,"TableOrQueryName":461,"DerivedTable":462,"TableOrQueryName_EDIT":463,"DerivedTable_EDIT":464,"OptionalOnColumn":465,"OptionalOnColumn_EDIT":466,"PushQueryState":467,"PopQueryState":468,"SubQuery":469,"SubQuery_EDIT":470,"QueryExpression":471,"QueryExpression_EDIT":472,"QueryExpressionBody":473,"QueryExpressionBody_EDIT":474,"NonJoinQueryExpression":475,"NonJoinQueryExpression_EDIT":476,"NonJoinQueryTerm":477,"NonJoinQueryTerm_EDIT":478,"NonJoinQueryPrimary":479,"NonJoinQueryPrimary_EDIT":480,"SimpleTable":481,"SimpleTable_EDIT":482,"OptionalPartitionBy":483,"OptionalOrderByAndWindow":484,"PartitionBy_EDIT":485,"OptionalOrderByAndWindow_EDIT":486,"PartitionBy":487,"OptionalWindowSpec":488,"WindowSpec_EDIT":489,"WindowSpec":490,"RowsOrRange":491,"PopLexerState":492,"OptionalCurrentOrPreceding":493,"OptionalAndFollowing":494,"UNBOUNDED":495,"OptionalCurrentOrPreceding_EDIT":496,"OptionalAndFollowing_EDIT":497,"PushHdfsLexerState":498,"HdfsPath":499,"HDFS_PATH":500,"HDFS_END_QUOTE":501,"HdfsPath_EDIT":502,"IntegerOrUnbounded":503,"CaseWhenThenList":504,"CaseWhenThenList_EDIT":505,"CaseWhenThenListPartTwo":506,"CaseWhenThenListPartTwo_EDIT":507,"$accept":0,"$end":1},
terminals_: {2:"error",4:"ALTER",5:"CURSOR",8:"CREATE",12:"DROP",16:"SET",30:"ALL",32:"=",34:"RESET",40:"TABLE",44:"AS",48:"VIEW",51:"COMMENT",55:"SINGLE_QUOTE",56:"DOUBLE_QUOTE",57:"VALUE",64:"ROLE",78:"LIKE",80:"(",82:")",86:",",96:"NOT",97:"NULL",108:"ARRAY",109:"<",110:">",113:"MAP",114:"STRUCT",121:":",126:"PARTITION",127:"BY",130:"RANGE",141:"VALUES",143:"COMPARISON_OPERATOR",155:"PURGE",163:"INSERT",164:"INTO",175:"WITH",183:"FROM",191:"GROUP",202:"HAVING",215:"CROSS",216:"JOIN",217:"FULL",218:"OUTER",219:"INNER",220:"LEFT",221:"SEMI",222:"RIGHT",223:"ON",227:"LIMIT",229:"VARIABLE_REFERENCE",233:"ORDER",240:"ASC",241:"DESC",242:"SELECT",248:"DISTINCT",254:"*",263:"UNION",265:"WHERE",268:".",270:"TRUE",271:"FALSE",272:"TRUNCATE",295:"AVG",296:"MAX",297:"MIN",298:"STDDEV_POP",299:"STDDEV_SAMP",300:"VAR_POP",301:"VAR_SAMP",302:"VARIANCE",303:"COUNT",304:"SUM",305:"ANALYTIC",307:"IF",308:"CAST",319:"OVER",322:"UPDATE",338:"USE",341:"EOF",345:";",347:"SetSpecification_EDIT",349:"OPTION",350:"REGULAR_IDENTIFIER",352:"!",353:"-",354:"[",355:"]",356:"~",357:"AND",358:"ARITHMETIC_OPERATOR",359:"BACKTICK",360:"BETWEEN",361:"BIGINT",362:"BOOLEAN",363:"CASE",364:"CHAR",365:"CURRENT",366:"DATABASE",367:"DECIMAL",368:"DOUBLE",369:"ELSE",370:"END",371:"EXISTS",372:"FLOAT",373:"FOLLOWING",374:"HDFS_START_QUOTE",375:"IN",376:"INT",377:"IS",378:"OR",379:"PRECEDING",380:"REGEXP",381:"RLIKE",382:"ROW",383:"ROWS",384:"SCHEMA",385:"SMALLINT",386:"STRING",387:"THEN",388:"TIMESTAMP",389:"TINYINT",390:"UNSIGNED_INTEGER",391:"UNSIGNED_INTEGER_E",392:"VARCHAR",393:"WHEN",394:"PARTIAL_CURSOR",398:"PARTIAL_VALUE",406:"CASCADE",440:"BETWEEN_AND",449:"+",495:"UNBOUNDED",500:"HDFS_PATH",501:"HDFS_END_QUOTE"},
productions_: [0,[3,2],[3,1],[3,1],[3,2],[3,1],[3,1],[3,1],[3,2],[3,1],[3,1],[3,1],[3,2],[3,1],[3,1],[19,1],[19,1],[19,1],[19,1],[19,1],[19,1],[19,1],[19,1],[19,1],[19,1],[19,2],[19,4],[19,1],[19,1],[19,1],[20,2],[6,1],[6,2],[6,2],[6,3],[37,3],[39,3],[39,3],[21,3],[7,1],[7,2],[7,3],[7,3],[7,3],[43,3],[46,3],[46,3],[49,0],[49,1],[50,2],[53,1],[54,2],[54,2],[54,3],[54,3],[22,3],[22,5],[9,4],[9,3],[9,5],[9,4],[9,6],[61,1],[63,1],[23,3],[24,4],[10,4],[10,4],[10,3],[65,3],[66,3],[66,3],[66,3],[66,3],[67,2],[70,2],[70,2],[74,0],[74,1],[74,2],[75,1],[75,2],[75,2],[77,3],[79,3],[81,1],[81,3],[83,1],[83,3],[83,3],[83,5],[83,2],[83,4],[83,4],[83,6],[85,3],[87,3],[87,3],[87,3],[90,0],[90,1],[93,1],[93,2],[92,1],[92,2],[92,2],[92,3],[94,2],[94,1],[94,1],[95,2],[89,1],[89,1],[89,1],[89,1],[89,1],[89,1],[89,1],[91,1],[91,1],[91,1],[99,4],[102,3],[105,4],[105,4],[100,6],[103,3],[106,6],[106,4],[106,6],[106,5],[101,4],[104,3],[107,4],[115,1],[115,3],[116,1],[116,2],[116,3],[116,3],[116,5],[117,4],[118,5],[118,4],[118,4],[118,4],[118,3],[118,3],[122,1],[122,3],[123,1],[123,2],[123,3],[123,3],[123,5],[124,2],[124,2],[124,1],[124,1],[112,1],[112,1],[68,0],[68,1],[125,3],[71,2],[71,3],[71,3],[128,3],[129,2],[129,2],[129,3],[129,3],[129,3],[132,3],[134,3],[134,3],[135,1],[135,3],[136,1],[136,3],[136,5],[136,3],[136,5],[137,6],[137,4],[137,4],[138,2],[138,2],[138,3],[138,4],[138,4],[138,5],[138,6],[138,6],[138,3],[138,4],[138,4],[140,1],[140,1],[69,0],[69,3],[72,3],[72,3],[144,0],[25,8],[11,4],[11,9],[11,3],[11,6],[11,7],[11,8],[11,8],[11,8],[145,0],[145,1],[147,3],[146,3],[148,2],[148,4],[149,3],[149,5],[149,5],[149,7],[26,5],[13,3],[13,3],[13,4],[13,5],[13,5],[13,6],[27,3],[28,5],[14,3],[14,4],[14,5],[14,5],[14,6],[154,0],[154,1],[29,4],[15,4],[15,5],[15,3],[15,4],[15,4],[156,1],[156,1],[157,1],[160,1],[160,1],[159,6],[161,2],[161,4],[161,4],[161,5],[161,6],[166,1],[166,3],[167,3],[165,0],[165,1],[45,3],[45,5],[45,2],[47,4],[47,3],[47,3],[47,1],[47,4],[47,3],[47,2],[47,2],[169,2],[174,2],[176,1],[176,3],[177,1],[177,3],[177,3],[177,5],[178,5],[179,2],[179,5],[179,5],[182,2],[185,2],[185,2],[184,1],[184,3],[186,1],[186,3],[186,3],[186,5],[186,3],[189,0],[189,1],[190,3],[193,3],[193,3],[193,2],[195,0],[195,1],[195,3],[195,3],[196,1],[196,3],[196,3],[196,5],[196,3],[197,1],[197,1],[192,1],[192,3],[194,1],[194,2],[194,3],[194,3],[194,3],[194,4],[194,5],[199,1],[199,2],[199,1],[200,0],[200,1],[201,2],[203,2],[203,2],[204,0],[204,1],[204,1],[205,3],[205,4],[206,1],[206,2],[210,3],[210,1],[210,3],[210,3],[210,3],[214,1],[214,2],[214,2],[214,3],[207,2],[207,2],[207,3],[207,2],[207,1],[207,3],[207,2],[207,3],[207,3],[207,2],[207,3],[207,2],[207,3],[207,3],[207,2],[211,2],[211,3],[211,3],[211,2],[211,3],[211,3],[211,3],[211,3],[211,2],[211,3],[211,3],[211,3],[211,3],[211,2],[209,0],[209,2],[224,1],[224,3],[213,2],[213,2],[225,0],[225,1],[226,2],[226,4],[226,2],[226,4],[230,2],[231,0],[231,1],[232,3],[235,3],[235,2],[234,1],[234,3],[236,1],[236,2],[236,3],[236,4],[236,5],[237,2],[238,2],[238,2],[239,0],[239,1],[239,1],[170,3],[170,4],[172,3],[172,3],[172,4],[172,4],[172,4],[172,5],[172,6],[172,4],[243,0],[243,1],[243,1],[245,2],[247,2],[247,4],[247,3],[244,1],[244,3],[246,1],[246,2],[246,3],[246,3],[246,3],[246,4],[246,3],[246,3],[246,4],[246,4],[246,4],[246,5],[246,5],[251,2],[251,1],[252,2],[252,3],[252,2],[249,5],[250,5],[250,5],[250,5],[250,5],[250,5],[250,6],[250,6],[250,6],[250,6],[250,6],[171,0],[171,1],[173,1],[259,1],[259,2],[260,1],[260,2],[260,2],[260,3],[261,4],[262,3],[262,4],[262,4],[256,0],[256,1],[258,2],[257,2],[257,2],[266,1],[267,1],[31,1],[31,3],[33,1],[33,1],[33,2],[33,1],[33,1],[33,1],[33,1],[35,4],[17,2],[17,4],[17,3],[17,4],[17,5],[17,5],[17,5],[274,2],[274,2],[274,1],[280,1],[280,2],[280,1],[280,2],[280,2],[280,2],[280,1],[275,1],[275,1],[275,1],[281,1],[281,1],[281,1],[286,4],[286,5],[289,5],[289,6],[289,5],[292,1],[292,1],[292,1],[292,1],[292,1],[292,1],[292,1],[292,1],[287,4],[287,3],[287,5],[290,5],[290,6],[290,5],[288,5],[288,3],[291,5],[291,6],[291,5],[277,3],[277,4],[283,4],[283,5],[283,4],[306,1],[306,1],[306,1],[306,1],[279,6],[279,3],[285,6],[285,5],[285,4],[285,6],[285,5],[285,4],[285,6],[285,5],[285,6],[285,5],[309,2],[309,2],[309,1],[309,1],[309,1],[309,1],[313,2],[313,2],[313,1],[313,1],[313,1],[317,2],[317,2],[318,2],[318,2],[311,2],[311,3],[314,3],[314,4],[314,3],[293,1],[293,3],[294,1],[294,3],[294,3],[294,5],[294,3],[294,5],[294,4],[294,3],[294,2],[294,2],[294,4],[276,0],[276,1],[282,1],[278,2],[278,2],[284,2],[158,6],[162,6],[162,6],[162,6],[162,6],[162,7],[162,3],[162,2],[162,2],[162,2],[323,1],[326,1],[329,1],[330,1],[324,1],[324,3],[327,1],[327,3],[327,3],[327,5],[333,3],[334,3],[334,2],[334,1],[335,1],[336,1],[337,1],[325,0],[325,2],[328,2],[328,2],[36,2],[18,2],[339,3],[342,3],[342,3],[264,0],[340,0],[340,1],[340,4],[343,1],[343,4],[343,4],[343,7],[344,1],[344,1],[344,1],[346,1],[346,2],[346,1],[346,1],[346,1],[346,1],[348,1],[348,1],[348,1],[60,1],[60,1],[60,1],[351,1],[351,1],[351,1],[351,1],[351,1],[351,1],[351,1],[351,1],[351,1],[351,1],[351,1],[351,1],[351,1],[351,1],[351,1],[351,1],[351,1],[351,1],[351,1],[351,1],[351,1],[351,1],[351,1],[351,1],[351,1],[351,1],[351,1],[351,1],[351,1],[351,1],[351,1],[351,1],[351,1],[351,1],[351,1],[351,1],[351,1],[351,1],[351,1],[351,1],[351,1],[351,1],[351,1],[351,1],[351,1],[351,1],[351,1],[351,1],[351,1],[351,1],[351,1],[351,1],[351,1],[351,1],[351,1],[351,1],[351,1],[351,1],[351,1],[351,1],[351,1],[351,1],[351,1],[351,1],[351,1],[351,1],[351,1],[351,1],[351,1],[351,1],[351,1],[351,1],[351,1],[351,1],[351,1],[351,1],[351,1],[351,1],[351,1],[351,1],[351,1],[351,1],[351,1],[351,1],[351,1],[351,1],[351,1],[351,1],[351,1],[351,1],[351,1],[351,1],[351,1],[351,1],[351,1],[351,1],[351,1],[351,1],[351,1],[351,1],[351,1],[351,1],[351,1],[351,1],[351,1],[351,1],[351,1],[351,1],[119,1],[119,2],[111,1],[111,1],[395,1],[395,1],[58,1],[58,1],[396,3],[396,2],[397,2],[399,3],[399,2],[400,2],[52,1],[52,1],[401,1],[401,1],[402,0],[402,2],[404,2],[152,0],[152,1],[151,0],[151,2],[153,2],[59,0],[59,3],[62,2],[62,3],[407,0],[407,2],[407,2],[273,0],[273,1],[408,1],[38,4],[409,4],[412,5],[414,2],[414,3],[414,4],[414,5],[414,5],[414,5],[413,1],[413,1],[413,1],[413,1],[415,1],[415,1],[416,1],[416,1],[418,1],[418,1],[419,1],[419,1],[417,2],[84,1],[84,1],[420,0],[420,1],[421,1],[131,3],[133,3],[133,3],[422,1],[422,3],[423,3],[423,5],[424,3],[425,1],[425,3],[41,1],[41,3],[42,1],[42,3],[42,3],[73,1],[73,3],[76,1],[76,3],[76,3],[403,1],[405,1],[410,1],[410,3],[411,1],[411,3],[411,3],[411,5],[426,3],[427,3],[427,3],[427,3],[427,1],[120,1],[120,3],[120,2],[428,1],[428,3],[429,1],[429,3],[331,1],[331,2],[332,1],[332,2],[150,1],[150,3],[198,1],[430,1],[430,3],[431,3],[431,5],[432,1],[432,3],[433,1],[433,3],[433,5],[433,3],[88,1],[434,1],[434,1],[98,1],[98,1],[98,2],[98,2],[98,1],[98,1],[98,1],[98,1],[98,1],[98,1],[98,1],[98,2],[435,0],[435,3],[436,0],[436,3],[436,5],[139,1],[139,2],[139,2],[139,2],[139,2],[139,4],[139,4],[139,4],[139,6],[139,2],[139,3],[139,3],[139,3],[139,3],[139,3],[139,6],[139,6],[139,5],[139,5],[139,6],[139,5],[139,3],[139,3],[139,3],[139,3],[139,3],[139,2],[139,3],[139,2],[139,3],[142,1],[142,3],[142,2],[142,2],[142,2],[142,2],[142,2],[142,2],[142,2],[142,2],[142,3],[142,4],[142,5],[142,4],[142,4],[142,4],[142,6],[142,6],[142,2],[142,3],[142,3],[142,3],[142,3],[142,3],[142,3],[142,3],[142,3],[142,3],[142,3],[142,3],[142,3],[142,3],[142,3],[142,3],[142,3],[142,3],[142,3],[142,4],[142,3],[142,6],[142,6],[142,5],[142,5],[142,6],[142,6],[142,6],[142,6],[142,5],[142,4],[142,5],[142,5],[142,5],[142,5],[142,4],[142,3],[142,3],[142,3],[142,3],[142,3],[142,3],[142,3],[142,3],[142,3],[142,3],[142,3],[142,3],[142,3],[142,3],[142,3],[142,3],[142,3],[142,3],[142,3],[142,3],[142,2],[142,3],[142,2],[142,3],[142,2],[142,3],[142,2],[142,3],[142,3],[142,4],[142,3],[142,3],[142,3],[439,1],[439,3],[448,1],[448,3],[448,3],[448,5],[448,3],[448,5],[448,4],[448,3],[448,2],[448,2],[448,4],[168,1],[168,3],[310,1],[310,3],[316,1],[269,1],[269,2],[269,2],[312,1],[315,1],[450,1],[450,1],[451,1],[228,1],[228,1],[454,1],[454,2],[454,3],[454,2],[455,2],[455,3],[455,4],[452,1],[452,1],[452,1],[453,1],[453,1],[456,1],[456,1],[437,0],[437,1],[187,1],[188,1],[457,1],[457,1],[458,1],[458,1],[459,2],[460,2],[460,2],[208,2],[208,2],[212,2],[212,2],[212,2],[461,1],[463,1],[462,1],[464,1],[465,0],[465,2],[466,2],[466,2],[467,0],[468,0],[438,3],[438,4],[443,3],[443,3],[180,2],[181,3],[469,1],[470,1],[471,1],[472,1],[473,1],[474,1],[475,1],[476,1],[477,1],[478,1],[479,1],[480,1],[481,1],[482,1],[253,0],[253,1],[253,1],[253,2],[253,2],[255,1],[255,1],[255,2],[255,2],[255,2],[320,4],[321,4],[321,4],[321,5],[321,7],[483,0],[483,1],[487,3],[485,2],[485,3],[485,3],[484,0],[484,2],[486,1],[486,3],[486,2],[488,0],[488,1],[490,5],[490,5],[489,2],[489,6],[489,5],[489,5],[489,5],[489,4],[492,0],[498,0],[499,3],[502,5],[502,4],[502,3],[502,3],[502,2],[491,1],[491,1],[493,0],[493,2],[493,2],[496,2],[496,2],[494,0],[494,3],[494,3],[497,2],[497,3],[497,3],[503,1],[503,1],[444,3],[444,3],[444,3],[441,2],[441,2],[441,2],[445,2],[445,2],[445,2],[445,2],[445,2],[445,2],[442,2],[442,4],[446,2],[446,4],[446,4],[446,3],[446,4],[446,3],[446,4],[446,4],[446,3],[446,4],[446,3],[447,1],[447,1],[504,1],[504,2],[505,1],[505,2],[505,3],[505,3],[505,2],[506,4],[507,2],[507,3],[507,4],[507,4],[507,3],[507,3],[507,4],[507,2],[507,3],[507,2],[507,3],[507,3],[507,4],[507,3],[507,4],[507,4],[507,5],[507,4],[507,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

     parser.suggestKeywords(['TABLE', 'VIEW']);
   
break;
case 4: case 8:

     parser.suggestKeywords(['DATABASE', 'ROLE', 'SCHEMA', 'TABLE', 'VIEW']);
   
break;
case 12:

     parser.suggestSetOptions();
   
break;
case 35: case 44: case 239: case 243: case 481: case 601:

     parser.addTablePrimary($$[$0]);
   
break;
case 36: case 234:

     if (parser.yy.result.suggestTables) {
       parser.yy.result.suggestTables.onlyTables = true;
     }
   
break;
case 37:

     parser.suggestTables({ onlyTables: true });
     parser.suggestDatabases({ appendDot: true });
   
break;
case 40: case 281:

     parser.suggestKeywords(['AS']);
   
break;
case 42: case 201: case 210: case 282: case 637: case 1084:

     parser.suggestKeywords(['SELECT']);
   
break;
case 45: case 244:

     if (parser.yy.result.suggestTables) {
       parser.yy.result.suggestTables.onlyViews = true;
     }
   
break;
case 46:

     parser.suggestTables({ onlyViews: true });
     parser.suggestDatabases({ appendDot: true });
   
break;
case 56:

     parser.addNewDatabaseLocation(_$[$0-1], [{ name: $$[$0-1] }]);
   
break;
case 57: case 67:

     if (!$$[$0-1]) {
       parser.suggestKeywords(['IF NOT EXISTS']);
     }
   
break;
case 59:

     if (!$$[$0-2]) {
       parser.suggestKeywords(['IF NOT EXISTS']);
     }
     parser.addNewDatabaseLocation(_$[$0], [{ name: $$[$0] }]);
   
break;
case 60:

     parser.addNewDatabaseLocation(_$[$0], [{ name: $$[$0] }]);
   
break;
case 61:

     parser.addNewDatabaseLocation(_$[$0-2], [{ name: $$[$0-2] }]);
   
break;
case 62:

     if (!$$[$0]) {
       parser.suggestKeywords(['COMMENT']);
     }
   
break;
case 73:

     var keywords = [];
     if (!$$[$0-2] && !$$[$0-1]) {
       keywords.push({ value: 'LIKE', weight: 1 });
     } else {
       if (!$$[$0-1]) {
         keywords.push({ value: 'PARTITIONED BY', weight: 12 });
       }
       keywords.push({ value: 'AS', weight: 1 });
     }

     if (keywords.length > 0) {
       parser.suggestKeywords(keywords);
     }
   
break;
case 74:

     parser.addNewTableLocation(_$[$0-1], $$[$0-1], $$[$0]);
     this.$ = $$[$0];
   
break;
case 79:
this.$ = [];
break;
case 81: case 598: case 618: case 831:

     parser.suggestTables();
     parser.suggestDatabases({ appendDot: true });
   
break;
case 83: case 219: case 221: case 263: case 433: case 566: case 569: case 764: case 767: case 853: case 906: case 1081:
this.$ = $$[$0-1];
break;
case 85: case 274:
this.$ = [$$[$0]];
break;
case 86:
this.$ = $$[$0-2].concat($$[$0]);
break;
case 91: case 93:

     parser.checkForKeywords($$[$0-1]);
   
break;
case 92: case 94:

     parser.checkForKeywords($$[$0-3]);
   
break;
case 95:

     this.$ = $$[$0-2];
     this.$.type = $$[$0-1];
     var keywords = [];
     if (!$$[$0]['comment']) {
       keywords.push('COMMENT');
     }
     if (keywords.length > 0) {
       this.$.suggestKeywords = keywords;
     }
   
break;
case 96: case 123: case 129: case 130: case 143: case 146: case 155: case 157:

     parser.suggestKeywords(parser.getColumnDataTypeKeywords());
   
break;
case 99:
this.$ = {};
break;
case 101:

     this.$ = {};
     this.$[$$[$0]] = true;
   
break;
case 102:

     $$[$0-1][$$[$0]] = true;
   
break;
case 107: case 108:
this.$ = 'null';
break;
case 109:
this.$ = 'comment';
break;
case 110:

     parser.suggestKeywords(['NULL']);
   
break;
case 128:

     parser.suggestKeywords(parser.getTypeKeywords());
   
break;
case 142: case 145:

     parser.suggestKeywords(['COMMENT']);
   
break;
case 164: case 1119:

     parser.suggestKeywords(['BY']);
   
break;
case 165:

     parser.suggestKeywords(['RANGE']);
   
break;
case 174: case 179: case 180:

     parser.suggestKeywords(['PARTITION']);
   
break;
case 186:

     parser.suggestKeywords(['VALUE', 'VALUES']);
   
break;
case 187:

     if ($$[$0].endsWithLessThanOrEqual) {
      parser.suggestKeywords(['VALUES']);
     }
   
break;
case 188: case 191: case 194:

     parser.suggestKeywords(['<', '<=']);
   
break;
case 189: case 796: case 799:

     parser.suggestKeywords(['VALUES']);
   
break;
case 192: case 195:

     parser.suggestFunctions();
   
break;
case 203:

     parser.commitLocations();
   
break;
case 205:

     if (!$$[$0-1]) {
       parser.suggestKeywords(['IF NOT EXISTS']);
     }
     parser.suggestDatabases({ appendDot: true });
   
break;
case 206:

     if (!$$[$0-6]) {
       parser.suggestKeywords(['IF NOT EXISTS']);
     }
   
break;
case 209:

     var keywords = [{value: 'AS', weight: 1 }];
     if (!$$[$0-1]) {
       keywords.push({ value: 'COMMENT', weight: 3 });
     }
     parser.suggestKeywords(keywords);
   
break;
case 216:

     if (!$$[$0-1]) {
       parser.suggestKeywords(['COMMENT']);
     }
   
break;
case 220: case 222:
this.$ = $$[$0-3];
break;
case 226:

     if (!$$[$0-1]) {
       parser.suggestKeywords(['IF EXISTS']);
     }
     parser.suggestDatabases();
   
break;
case 227:

     parser.suggestKeywords(['CASCADE']);
   
break;
case 229:

     if (!$$[$0-3]) {
       parser.suggestKeywords(['IF EXISTS']);
     }
   
break;
case 231: case 486:

     parser.addTablePrimary($$[$0-1]);
   
break;
case 233:

     if (!$$[$0-1]) {
       parser.suggestKeywords(['IF EXISTS']);
     }
     parser.suggestTables({ onlyTables: true });
     parser.suggestDatabases({
       appendDot: true
     });
   
break;
case 236:

     parser.addTablePrimary($$[$0-2]);
     if (!$$[$0-1]) {
       parser.suggestKeywords(['PURGE']);
     }
   
break;
case 240:

     if (!$$[$0-1]) {
       parser.suggestKeywords(['IF EXISTS']);
     }
     parser.suggestTables({ onlyViews: true });
     parser.suggestDatabases({ appendDot: true });
   
break;
case 241:

     parser.addTablePrimary($$[$0]);
     if (!$$[$0-2]) {
       parser.suggestKeywords(['IF EXISTS']);
     }
   
break;
case 250:

     $$[$0-2].owner = 'insert';
     parser.addTablePrimary($$[$0-2]);
   
break;
case 251:

     parser.suggestKeywords(['INTO']);
   
break;
case 252:

     if (!$$[$0-1]) {
       parser.suggestKeywords(['TABLE']);
     }
     parser.suggestTables();
     parser.suggestDatabases({ appendDot: true });
   
break;
case 254:

     $$[$0-1].owner = 'insert';
     parser.addTablePrimary($$[$0-1]);
     parser.suggestKeywords(['VALUES']);
   
break;
case 262: case 435:
this.$ = $$[$0-2];
break;
case 264:

     parser.addCommonTableExpressions($$[$0-3]);
   
break;
case 265: case 266: case 277:

     parser.addCommonTableExpressions($$[$0-2]);
   
break;
case 272: case 288: case 312: case 388: case 392: case 430: case 440: case 467: case 617: case 1006: case 1008: case 1063: case 1118: case 1193:
this.$ = $$[$0];
break;
case 275:
this.$ = $$[$0-2].concat([$$[$0]]);
break;
case 279:

     parser.addCommonTableExpressions($$[$0-4]);
   
break;
case 280:

     parser.addCteAliasLocation(_$[$0-4], $$[$0-4]);
     $$[$0-1].alias = $$[$0-4];
     this.$ = $$[$0-1];
   
break;
case 284:

     this.$ = { tableReferenceList : $$[$0] }
   
break;
case 285: case 293:

       parser.suggestTables();
       parser.suggestDatabases({ appendDot: true });
   
break;
case 296:

     this.$ = { valueExpression: $$[$0] };
   
break;
case 297: case 399:

     parser.suggestSelectListAliases();
   
break;
case 298:

     parser.valueExpressionSuggest();
     parser.suggestSelectListAliases();
     parser.suggestGroupBys({ tablePrimaries: parser.yy.latestTablePrimaries.concat() });
   
break;
case 299:

     parser.suggestKeywords(['BY']);
     parser.suggestGroupBys({ prefix: 'BY', tablePrimaries: parser.yy.latestTablePrimaries.concat() });
   
break;
case 309: case 612: case 821: case 824: case 825: case 850: case 851: case 872: case 875:

     parser.suggestColumns();
   
break;
case 314: case 315: case 321: case 322: case 849: case 1077: case 1120:

     parser.valueExpressionSuggest();
   
break;
case 326:

     parser.valueExpressionSuggest();
     parser.suggestAggregateFunctions();
     parser.suggestSelectListAliases(true);
   
break;
case 327:

     parser.suggestAggregateFunctions();
     parser.suggestSelectListAliases(true);
   
break;
case 331:

     if ($$[$0] && $$[$0].valueExpression) {
       this.$ = $$[$0].valueExpression;
     } else {
       this.$ = {};
     }
     this.$.joinType = $$[$0-2];
     if ($$[$0].noJoinCondition) {
       this.$.suggestJoinConditions = { prependOn: true, tablePrimaries: parser.yy.latestTablePrimaries.concat() }
     }
     if ($$[$0].suggestKeywords) {
       this.$.suggestKeywords = $$[$0].suggestKeywords;
     }
     if (parser.yy.latestTablePrimaries.length > 0) {
        parser.yy.latestTablePrimaries[parser.yy.latestTablePrimaries.length - 1].join = true;
     }
   
break;
case 332:

     if ($$[$0] && $$[$0].valueExpression) {
       this.$ = $$[$0].valueExpression;
     } else {
       this.$ = {};
     }
     this.$.joinType = $$[$0-3];
     if ($$[$0].noJoinCondition) {
       this.$.suggestJoinConditions = { prependOn: true, tablePrimaries: parser.yy.latestTablePrimaries.concat() }
     }
     if ($$[$0].suggestKeywords) {
       this.$.suggestKeywords = $$[$0].suggestKeywords;
     }
     if (parser.yy.latestTablePrimaries.length > 0) {
       parser.yy.latestTablePrimaries[parser.yy.latestTablePrimaries.length - 1].join = true;
     }
   
break;
case 333:
this.$ = { joinType: $$[$0] };
break;
case 334:
this.$ = { joinType: $$[$0-1] };
break;
case 335:

     if ($$[$0-2].suggestKeywords) {
       parser.suggestKeywords($$[$0-2].suggestKeywords);
     }
   
break;
case 336:

     if ($$[$0].suggestKeywords) {
       parser.suggestKeywords($$[$0].suggestKeywords);
     }
   
break;
case 339:

     if (parser.yy.latestTablePrimaries.length > 0) {
       var idx = parser.yy.latestTablePrimaries.length - 1;
       var tables = [];
       do {
         var tablePrimary = parser.yy.latestTablePrimaries[idx];
         if (!tablePrimary.subQueryAlias) {
           tables.unshift(tablePrimary.alias ? { identifierChain: tablePrimary.identifierChain, alias: tablePrimary.alias } : { identifierChain: tablePrimary.identifierChain })
         }
         idx--;
       } while (idx >= 0 && tablePrimary.join && !tablePrimary.subQueryAlias)

       if (tables.length > 0) {
         parser.suggestJoins({
           prependJoin: false,
           joinType: $$[$0-2],
           tables: tables
         })
       }
     }
     parser.suggestTables();
     parser.suggestDatabases({
       appendDot: true
     });
   
break;
case 344:
this.$ = 'CROSS JOIN';
break;
case 345:
this.$ = 'FULL JOIN';
break;
case 346:
this.$ = 'FULL OUTER JOIN';
break;
case 347:
this.$ = 'INNER JOIN';
break;
case 348:
this.$ = 'JOIN';
break;
case 349:
this.$ = 'LEFT INNER JOIN';
break;
case 350:
this.$ = 'LEFT JOIN';
break;
case 351:
this.$ = 'LEFT OUTER JOIN';
break;
case 352:
this.$ = 'LEFT SEMI JOIN';
break;
case 353:
this.$ = 'OUTER JOIN';
break;
case 354: case 356:
this.$ = 'RIGHT OUTER JOIN';
break;
case 355:
this.$ = 'RIGHT JOIN';
break;
case 357:
this.$ = 'RIGHT SEMI JOIN';
break;
case 358:
this.$ = 'SEMI JOIN';
break;
case 359: case 361: case 362: case 364: case 365: case 366: case 367: case 369: case 370: case 371: case 372:
this.$ = { suggestKeywords: ['JOIN'] };
break;
case 360: case 363: case 368:
this.$ = { suggestKeywords: ['OUTER'] };
break;
case 373:
this.$ = { noJoinCondition: true, suggestKeywords: ['ON'] };
break;
case 374:
this.$ = { valueExpression: $$[$0] };
break;
case 378:

     parser.valueExpressionSuggest();
     parser.suggestJoinConditions({ prependOn: false });
   
break;
case 385:

     parser.suggestKeywords([{ value: '10', weight: 10000 }, { value: '100', weight: 10000 }, { value: '1000', weight: 10000 }, { value: '5000', weight: 10000 }, { value: '10000', weight: 10000 }])
   
break;
case 389:

     if ($$[$0].emptyOrderBy) {
       parser.suggestOrderBys({ tablePrimaries: parser.yy.latestTablePrimaries.concat() });
     }
   
break;
case 390:

     parser.suggestKeywords(['BY']);
     parser.suggestOrderBys({ prefix: 'BY', tablePrimaries: parser.yy.latestTablePrimaries.concat() });
   
break;
case 394:

     this.$ = { emptyOrderBy: false }
     parser.valueExpressionSuggest();
     parser.suggestAnalyticFunctions();
     parser.suggestSelectListAliases();
   
break;
case 395: case 396: case 397:
this.$ = { emptyOrderBy: false };
break;
case 398:
this.$ = parser.mergeSuggestKeywords($$[$0]);
break;
case 400:

     this.$ = { emptyOrderBy: true }
     parser.valueExpressionSuggest();
     parser.suggestAnalyticFunctions();
     parser.suggestSelectListAliases();
   
break;
case 401:
this.$ = { suggestKeywords: ['ASC', 'DESC'] };;
break;
case 404:

     parser.addClauseLocation('selectList', parser.firstDefined($$[$0-1], _$[$0-1], $$[$0-2], _$[$0-2]), _$[$0]);
     this.$ = { selectList: $$[$0] };
   
break;
case 405:

     parser.addClauseLocation('selectList', parser.firstDefined($$[$0-2], _$[$0-2], $$[$0-3], _$[$0-3]), _$[$0-1]);
     this.$ = { selectList: $$[$0-1], tableExpression: $$[$0] }
   
break;
case 406:

     parser.addClauseLocation('selectList', parser.firstDefined($$[$0-1], _$[$0-1], $$[$0-2], _$[$0-2]), _$[$0]);
     if ($$[$0].cursorAtStart) {
       var keywords = parser.getSelectListKeywords();
       if (!$$[$0-1]) {
         keywords = keywords.concat(parser.SELECT_FIRST_OPTIONAL_KEYWORDS);
       }
       parser.suggestKeywords(keywords);
     } else {
       parser.checkForSelectListKeywords($$[$0]);
     }
     if ($$[$0].suggestFunctions) {
       parser.suggestFunctions();
     }
     if ($$[$0].suggestColumns) {
       parser.suggestColumns({ identifierChain: [], source: 'select' });
     }
     if ($$[$0].suggestTables) {
       parser.suggestTables({ prependQuestionMark: true, prependFrom: true });
     }
     if ($$[$0].suggestDatabases) {
       parser.suggestDatabases({ prependQuestionMark: true, prependFrom: true, appendDot: true });
     }
     if ($$[$0].suggestAggregateFunctions && (!$$[$0-1] || $$[$0-1] === 'ALL')) {
       parser.suggestAggregateFunctions();
       parser.suggestAnalyticFunctions();
     }
   
break;
case 407:

     parser.addClauseLocation('selectList', parser.firstDefined($$[$0-1], _$[$0-1], $$[$0-2], _$[$0-2]), _$[$0], true);
     var keywords = parser.getSelectListKeywords();
     if (!$$[$0-1] || $$[$0-1] === 'ALL') {
       parser.suggestAggregateFunctions();
       parser.suggestAnalyticFunctions();
     }
     if (!$$[$0-1]) {
       keywords = keywords.concat(parser.SELECT_FIRST_OPTIONAL_KEYWORDS);
     }
     parser.suggestKeywords(keywords);
     parser.suggestFunctions();
     parser.suggestColumns({ identifierChain: [], source: 'select' });
     parser.suggestTables({ prependQuestionMark: true, prependFrom: true });
     parser.suggestDatabases({ prependQuestionMark: true, prependFrom: true, appendDot: true });
   
break;
case 408:

     parser.addClauseLocation('selectList', parser.firstDefined($$[$0-2], _$[$0-2], $$[$0-3], _$[$0-3]), _$[$0-1]);
   
break;
case 409:

     parser.addClauseLocation('selectList', parser.firstDefined($$[$0-2], _$[$0-2], $$[$0-3], _$[$0-3]), _$[$0-1]);
     parser.selectListNoTableSuggest($$[$0-1], $$[$0-2]);
     if (parser.yy.result.suggestColumns) {
       parser.yy.result.suggestColumns.source = 'select';
     }
   
break;
case 410:

     parser.addClauseLocation('selectList', parser.firstDefined($$[$0-2], _$[$0-2], $$[$0-3], _$[$0-3]), _$[$0-1], true);
     var keywords = parser.getSelectListKeywords();
     if (!$$[$0-2] || $$[$0-2] === 'ALL') {
       parser.suggestAggregateFunctions();
       parser.suggestAnalyticFunctions();
     }
     if (!$$[$0-2]) {
       keywords = keywords.concat(parser.SELECT_FIRST_OPTIONAL_KEYWORDS);
     }
     parser.suggestKeywords(keywords);
     parser.suggestFunctions();
     parser.suggestColumns({ identifierChain: [], source: 'select' });
     parser.suggestTables({ prependQuestionMark: true, prependFrom: true });
     parser.suggestDatabases({ prependQuestionMark: true, prependFrom: true, appendDot: true });
   
break;
case 411:

     parser.addClauseLocation('selectList', parser.firstDefined($$[$0-3], _$[$0-3], $$[$0-4], _$[$0-4]), _$[$0-2]);
     parser.checkForSelectListKeywords($$[$0-2]);
   
break;
case 412:

     parser.addClauseLocation('selectList', parser.firstDefined($$[$0-4], _$[$0-4], $$[$0-5], _$[$0-5]), _$[$0-3]);
     parser.checkForSelectListKeywords($$[$0-3]);
   
break;
case 413:

     parser.addClauseLocation('selectList', parser.firstDefined($$[$0-2], _$[$0-2], $$[$0-3], _$[$0-3]), _$[$0-1]);
     parser.checkForSelectListKeywords($$[$0-1]);
     var keywords = ['FROM'];
     if (parser.yy.result.suggestKeywords) {
       keywords = parser.yy.result.suggestKeywords.concat(keywords);
     }
     parser.suggestKeywords(keywords);
     parser.suggestTables({ prependFrom: true });
     parser.suggestDatabases({ prependFrom: true, appendDot: true });
   
break;
case 417: case 418:

     parser.addClauseLocation('whereClause', _$[$0-1], $$[$0].whereClauseLocation);
     parser.addClauseLocation('limitClause', $$[$0].limitClausePreceding || _$[$0-1], $$[$0].limitClauseLocation);
   
break;
case 419:

     var keywords = [];

     parser.addClauseLocation('whereClause', _$[$0-3], $$[$0-1].whereClauseLocation);
     parser.addClauseLocation('limitClause', $$[$0-2].limitClausePreceding || _$[$0-3], $$[$0-2].limitClauseLocation);

     if ($$[$0-3]) {
       if (typeof $$[$0-3].tableReferenceList.hasJoinCondition !== 'undefined' && !$$[$0-3].tableReferenceList.hasJoinCondition) {
         keywords.push({ value: 'ON', weight: 3 });
       }
       if ($$[$0-3].suggestKeywords) {
         keywords = parser.createWeightedKeywords($$[$0-3].suggestKeywords, 3);
       }
       if ($$[$0-3].tableReferenceList.suggestJoinConditions) {
         parser.suggestJoinConditions($$[$0-3].tableReferenceList.suggestJoinConditions);
       }
       if ($$[$0-3].tableReferenceList.suggestJoins) {
         parser.suggestJoins($$[$0-3].tableReferenceList.suggestJoins);
       }
       if ($$[$0-3].tableReferenceList.suggestKeywords) {
         keywords = keywords.concat(parser.createWeightedKeywords($$[$0-3].tableReferenceList.suggestKeywords, 3));
       }

       // Lower the weights for 'TABLESAMPLE'
       keywords.forEach(function (keyword) {
         if (keyword.value === 'TABLESAMPLE') {
           keyword.weight = 1.1;
         }
       });

       if ($$[$0-3].tableReferenceList.types) {
         var veKeywords = parser.getValueExpressionKeywords($$[$0-3].tableReferenceList);
         keywords = keywords.concat(veKeywords.suggestKeywords);
         if (veKeywords.suggestColRefKeywords) {
           parser.suggestColRefKeywords(veKeywords.suggestColRefKeywords);
           parser.addColRefIfExists($$[$0-3].tableReferenceList);
         }
       }
     }

     if ($$[$0-1].empty && $$[$0] && $$[$0].joinType.toUpperCase() === 'JOIN') {
       keywords = keywords.concat(['FULL', 'FULL OUTER', 'INNER', 'LEFT', 'LEFT OUTER', 'RIGHT', 'RIGHT OUTER']);
       parser.suggestKeywords(keywords);
       return;
     }

     if ($$[$0-1].suggestKeywords) {
       keywords = keywords.concat(parser.createWeightedKeywords($$[$0-1].suggestKeywords, 2));
     }

     if ($$[$0-1].suggestFilters) {
       parser.suggestFilters($$[$0-1].suggestFilters);
     }
     if ($$[$0-1].suggestGroupBys) {
       parser.suggestGroupBys($$[$0-1].suggestGroupBys);
     }
     if ($$[$0-1].suggestOrderBys) {
       parser.suggestOrderBys($$[$0-1].suggestOrderBys);
     }

     if ($$[$0-1].empty) {
       keywords.push({ value: 'UNION', weight: 2.11 });
     }

     keywords = keywords.concat([
       { value: 'FULL JOIN', weight: 1 },
       { value: 'FULL OUTER JOIN', weight: 1 },
       { value: 'INNER JOIN', weight: 1 },
       { value: 'JOIN', weight: 1 },
       { value: 'LEFT JOIN', weight: 1 },
       { value: 'LEFT OUTER JOIN', weight: 1 },
       { value: 'RIGHT JOIN', weight: 1 },
       { value: 'RIGHT OUTER JOIN', weight: 1 }
     ]);
     parser.suggestKeywords(keywords);
  
break;
case 420:

     // A couple of things are going on here:
     // - If there are no SelectConditions (WHERE, GROUP BY, etc.) we should suggest complete join options
     // - If there's an OptionalJoin at the end, i.e. 'SELECT * FROM foo | JOIN ...' we should suggest
     //   different join types
     // - The FromClause could end with a valueExpression, in which case we should suggest keywords like '='
     //   or 'AND' based on type

     if (!$$[$0-1]) {
       parser.addClauseLocation('whereClause', _$[$0-2]);
       parser.addClauseLocation('limitClause', _$[$0-2]);
       return;
     }
     parser.addClauseLocation('whereClause', _$[$0-2], $$[$0-1].whereClauseLocation);
     parser.addClauseLocation('limitClause', $$[$0-1].limitClausePreceding || _$[$0-2], $$[$0-1].limitClauseLocation);
     var keywords = [];

     if ($$[$0-1].suggestColRefKeywords) {
       parser.suggestColRefKeywords($$[$0-1].suggestColRefKeywords);
       parser.addColRefIfExists($$[$0-1]);
     }

     if ($$[$0-1].suggestKeywords && $$[$0-1].suggestKeywords.length) {
       keywords = keywords.concat(parser.createWeightedKeywords($$[$0-1].suggestKeywords, 2));
     }

     if ($$[$0-1].cursorAtEnd) {
       keywords.push({ value: 'UNION', weight: 2.11 });
     }
     parser.suggestKeywords(keywords);
   
break;
case 421:
this.$ = [ $$[$0] ];
break;
case 422:

     $$[$0-2].push($$[$0]);
   
break;
case 424: case 425:

     this.$ = { cursorAtStart : true, suggestFunctions: true, suggestColumns: true, suggestAggregateFunctions: true };
   
break;
case 427:

     parser.checkForSelectListKeywords($$[$0-2]);
   
break;
case 428:

     parser.checkForSelectListKeywords($$[$0-3]);
   
break;
case 429:

     this.$ = { suggestKeywords: parser.getSelectListKeywords(), suggestTables: true, suggestDatabases: true, suggestFunctions: true, suggestColumns: true, suggestAggregateFunctions: true };
   
break;
case 431: case 432: case 434:

     this.$ = { suggestKeywords: parser.getSelectListKeywords(), suggestFunctions: true, suggestColumns: true, suggestAggregateFunctions: true,  };
   
break;
case 436:

     if ($$[$0]) {
       parser.addColumnAliasLocation($$[$0].location, $$[$0].alias, _$[$0-1]);
       this.$ = { valueExpression: $$[$0-1], alias: $$[$0].alias };
       if (!parser.yy.selectListAliases) {
         parser.yy.selectListAliases = [];
       }
       parser.yy.selectListAliases.push($$[$0-1].function && $$[$0-1].types && $$[$0-1].types.length && $$[$0-1].types[0] === 'UDFREF' ? { name: $$[$0].alias, udfRef: $$[$0-1].function, types: $$[$0-1].types } : { name: $$[$0].alias, types: $$[$0-1].types || ['T'] });
     } else {
       this.$ = { valueExpression: $$[$0-1] }
     }
   
break;
case 437:

     parser.addAsteriskLocation(_$[$0], [{ asterisk: true }]);
     this.$ = { asterisk: true }
   
break;
case 438:

     if ($$[$0]) {
       parser.addColumnAliasLocation($$[$0].location, $$[$0].alias, _$[$0-1]);
     }
   
break;
case 439:

     parser.suggestFunctions();
     parser.suggestColumns();
     parser.addColumnAliasLocation(_$[$0], $$[$0], _$[$0-2]);
     this.$ = { suggestAggregateFunctions: true };
   
break;
case 441:

     var keywords = parser.getKeywordsForOptionalsLR(
       [$$[$0-4], $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]],
       [{ value: 'WHERE', weight: 7 }, { value: 'GROUP BY', weight: 6 }, { value: 'HAVING', weight: 5 }, { value: 'ORDER BY', weight: 4 }, { value: 'LIMIT', weight: 3 }],
       [true, true, true, true, true]);

     if (keywords.length > 0) {
       this.$ = { suggestKeywords: keywords, empty: !$$[$0-4] && !$$[$0-3] && !$$[$0-2] && !$$[$0-1] && !$$[$0] };
     } else {
       this.$ = {};
     }

     this.$.whereClauseLocation = $$[$0-4] ? _$[$0-4] : undefined;
     this.$.limitClausePreceding = parser.firstDefined($$[$0-1], _$[$0-1], $$[$0-2], _$[$0-2], $$[$0-3], _$[$0-3], $$[$0-4], _$[$0-4]);
     this.$.limitClauseLocation = $$[$0] ? _$[$0] : undefined;

     if (!$$[$0-4] && !$$[$0-3] && !$$[$0-2] && !$$[$0-1] && !$$[$0]) {
       this.$.suggestFilters = { prefix: 'WHERE', tablePrimaries: parser.yy.latestTablePrimaries.concat() };
     }
     if (!$$[$0-3] && !$$[$0-2] && !$$[$0-1] && !$$[$0]) {
       this.$.suggestGroupBys = { prefix: 'GROUP BY', tablePrimaries: parser.yy.latestTablePrimaries.concat() };
     }
     if (!$$[$0-1] && !$$[$0]) {
       this.$.suggestOrderBys = { prefix: 'ORDER BY', tablePrimaries: parser.yy.latestTablePrimaries.concat() };
     }
   
break;
case 442:

     if (parser.yy.result.suggestColumns) {
       parser.yy.result.suggestColumns.source = 'where';
     }
   
break;
case 443:

     if (parser.yy.result.suggestColumns) {
       parser.yy.result.suggestColumns.source = 'group by';
     }
   
break;
case 445:

     if (parser.yy.result.suggestColumns) {
       parser.yy.result.suggestColumns.source = 'order by';
     }
   
break;
case 447:

     var keywords = parser.getKeywordsForOptionalsLR(
       [$$[$0-3], $$[$0-2], $$[$0-1], $$[$0]],
       [{ value: 'GROUP BY', weight: 8 }, { value: 'HAVING', weight: 7 }, { value: 'ORDER BY', weight: 5 }, { value: 'LIMIT', weight: 3 }],
       [true, true, true, true]);
     if ($$[$0-5].suggestKeywords) {
       keywords = keywords.concat(parser.createWeightedKeywords($$[$0-5].suggestKeywords, 1));
     }
     this.$ = parser.getValueExpressionKeywords($$[$0-5], keywords);
     this.$.cursorAtEnd = !$$[$0-3] && !$$[$0-2] && !$$[$0-1] && !$$[$0];
     if ($$[$0-5].columnReference) {
       this.$.columnReference = $$[$0-5].columnReference;
     }
     if (!$$[$0-3]) {
       parser.suggestGroupBys({ prefix: 'GROUP BY', tablePrimaries: parser.yy.latestTablePrimaries.concat() });
     }
     if (!$$[$0-3] && !$$[$0-2] && !$$[$0-1]) {
       parser.suggestOrderBys({ prefix: 'ORDER BY', tablePrimaries: parser.yy.latestTablePrimaries.concat() });
     }
     this.$.whereClauseLocation = $$[$0-5] ? _$[$0-5] : undefined;
     this.$.limitClausePreceding = parser.firstDefined($$[$0-1], _$[$0-1], $$[$0-2], _$[$0-2], $$[$0-3], _$[$0-3], $$[$0-5], _$[$0-5]);
     this.$.limitClauseLocation = $$[$0] ? _$[$0] : undefined;
   
break;
case 448:

     var keywords = parser.getKeywordsForOptionalsLR(
       [$$[$0-2], $$[$0-1], $$[$0]],
       [{ value: 'HAVING', weight: 7 }, { value: 'ORDER BY', weight: 5 }, { value: 'LIMIT', weight: 3 }],
       [true, true, true]);
     if ($$[$0-4].suggestKeywords) {
       keywords = keywords.concat(parser.createWeightedKeywords($$[$0-4].suggestKeywords, 8));
     }
     if ($$[$0-4].valueExpression) {
       this.$ = parser.getValueExpressionKeywords($$[$0-4].valueExpression, keywords);
       if ($$[$0-4].valueExpression.columnReference) {
         this.$.columnReference = $$[$0-4].valueExpression.columnReference;
       }
     } else {
       this.$ = { suggestKeywords: keywords };
     }
     this.$.cursorAtEnd = !$$[$0-2] && !$$[$0-1] && !$$[$0];
     if (!$$[$0-2] && !$$[$0-1]) {
       parser.suggestOrderBys({ prefix: 'ORDER BY', tablePrimaries: parser.yy.latestTablePrimaries.concat() });
     }
     this.$.whereClauseLocation = $$[$0-5] ? _$[$0-5] : undefined;
     this.$.limitClausePreceding = parser.firstDefined($$[$0-1], _$[$0-1], $$[$0-2], _$[$0-2], $$[$0-4], _$[$0-4]);
     this.$.limitClauseLocation = $$[$0] ? _$[$0] : undefined;
   
break;
case 449:

     var keywords = parser.getKeywordsForOptionalsLR(
       [$$[$0-1], $$[$0]],
       [{ value: 'ORDER BY', weight: 5 }, { value: 'LIMIT', weight: 3 }],
       [true, true]);
     this.$ = { suggestKeywords: keywords, cursorAtEnd: !$$[$0-1] && !$$[$0] };
     if (!$$[$0-1]) {
       parser.suggestOrderBys({ prefix: 'ORDER BY', tablePrimaries: parser.yy.latestTablePrimaries.concat() });
     }
     this.$.whereClauseLocation = $$[$0-5] ? _$[$0-5] : undefined;
     this.$.limitClausePreceding = parser.firstDefined($$[$0-1], _$[$0-1], $$[$0-3], _$[$0-3]);
     this.$.limitClauseLocation = $$[$0] ? _$[$0] : undefined;
   
break;
case 450:

     var keywords = parser.getKeywordsForOptionalsLR(
       [$$[$0]],
       [{ value: 'LIMIT', weight: 3 }],
       [true]);
     if ($$[$0-2].suggestKeywords) {
       keywords = keywords.concat(parser.createWeightedKeywords($$[$0-2].suggestKeywords, 4));
     }
     this.$ = { suggestKeywords: keywords, cursorAtEnd: !$$[$0] };
     this.$.whereClauseLocation = $$[$0-5] ? _$[$0-5] : undefined;
     this.$.limitClausePreceding = parser.firstDefined($$[$0-2], _$[$0-2]);
     this.$.limitClauseLocation = $$[$0] ? _$[$0] : undefined;
   
break;
case 451:

     this.$ = { suggestKeywords: [], cursorAtEnd: true };
     this.$.whereClauseLocation = $$[$0-5] ? _$[$0-5] : undefined;
     this.$.limitClausePreceding = parser.firstDefined($$[$0-2], _$[$0-2], $$[$0-3], _$[$0-3], $$[$0-4], _$[$0-4], $$[$0-5], _$[$0-5]);
     this.$.limitClauseLocation = _$[$0-1];
   
break;
case 462:

     parser.suggestKeywords(['ALL', 'DISTINCT', 'SELECT']);
   
break;
case 463:

     parser.suggestKeywords(['ALL', 'DISTINCT']);
   
break;
case 468:

     if ($$[$0].suggestFilters) {
       parser.suggestFilters({ tablePrimaries: parser.yy.latestTablePrimaries.concat() });
     }
   
break;
case 469:

     parser.suggestFunctions();
     parser.suggestColumns();
     parser.suggestKeywords(['EXISTS', 'NOT EXISTS']);
     parser.suggestFilters({ tablePrimaries: parser.yy.latestTablePrimaries.concat() });
   
break;
case 482:

     parser.suggestKeywords(['TABLE']);
   
break;
case 483:

     parser.suggestTables();
     parser.suggestDatabases({ appendDot: true });
     if (!$$[$0-1]) {
       parser.suggestKeywords(['IF EXISTS']);
     }
   
break;
case 487:

     parser.addTablePrimary($$[$0-1]);
     if (!$$[$0-2]) {
       parser.suggestKeywords(['IF EXISTS']);
     }
   
break;
case 489:

     if (!$$[$0]) {
       $$[$0-1].suggestKeywords = ['OVER'];
     }
   
break;
case 496:

     parser.suggestKeywords(['OVER']);
   
break;
case 505:

     this.$ = { function: $$[$0-3], types: ['UDFREF'] };
   
break;
case 506: case 524:

     parser.addFunctionArgumentLocations($$[$0-4], $$[$0-1].expressions);
     this.$ = { function: $$[$0-4], types: ['UDFREF'] };
   
break;
case 507:

     parser.valueExpressionSuggest();
     var keywords = parser.getSelectListKeywords(true);
     if (!$$[$0-2]) {
       if ($$[$0-4].toLowerCase() === 'group_concat') {
         keywords.push('ALL');
       } else {
         keywords.push('DISTINCT');
       }
     }
     if (parser.yy.result.suggestKeywords) {
       keywords = parser.yy.result.suggestKeywords.concat(keywords);
     }
     parser.suggestKeywords(keywords);
     parser.applyArgumentTypesToSuggestions($$[$0-4], 1);
     this.$ = { function: $$[$0-4], types: ['UDFREF'] };
   
break;
case 508: case 522:

     parser.suggestValueExpressionKeywords($$[$0-2].expressions[$$[$0-2].expressions.length - 1].expression);
     this.$ = { function: $$[$0-5], types: ['UDFREF'] };
   
break;
case 509:

     if ($$[$0-1].cursorAtStart) {
       var keywords = parser.getSelectListKeywords(true);
       if (!$$[$0-2]) {
         if ($$[$0-4].toLowerCase() === 'group_concat') {
           keywords.push('ALL');
         } else {
           keywords.push('DISTINCT');
         }
       }
       if (parser.yy.result.suggestKeywords) {
         keywords = parser.yy.result.suggestKeywords.concat(keywords);
       }
       parser.suggestKeywords(keywords);
     }
     if (parser.yy.result.suggestFunctions && !parser.yy.result.suggestFunctions.types) {
       parser.applyArgumentTypesToSuggestions($$[$0-4], $$[$0-1].activePosition);
     }
     this.$ = { function: $$[$0-4], types: ['UDFREF'] };
   
break;
case 518:

     parser.addFunctionArgumentLocations($$[$0-3], [{
       expression: { text: $$[$0-1] },
       location: _$[$0-1]
     }]);
     this.$ = { function: $$[$0-3], types: ['UDFREF'] }
   
break;
case 519: case 525:

     this.$ = { function: $$[$0-2], types: ['UDFREF'] }
   
break;
case 520:

     parser.addFunctionArgumentLocations($$[$0-4], $$[$0-1].expressions);
     this.$ = { function: $$[$0-4], types: ['UDFREF'] }
   
break;
case 521:

     parser.valueExpressionSuggest();
     var keywords = parser.getSelectListKeywords();
     if (!$$[$0-2]) {
       keywords.push('DISTINCT');
       if (parser.yy.result.suggestKeywords) {
         keywords = parser.yy.result.suggestKeywords.concat(keywords);
       }
     }
     parser.suggestKeywords(keywords);
     this.$ = { function: $$[$0-4], types: ['UDFREF'] };
   
break;
case 523:

     if ($$[$0-1].cursorAtStart) {
       var keywords = parser.getSelectListKeywords();
       if (!$$[$0-2]) {
         keywords.push('DISTINCT');
       }
       parser.suggestKeywords(keywords);
     }
     this.$ = { function: $$[$0-4], types: ['UDFREF'] };
   
break;
case 526:

     parser.valueExpressionSuggest();
     parser.applyArgumentTypesToSuggestions($$[$0-4], 1);
     var keywords = parser.getSelectListKeywords(true);
     if (!$$[$0-2]) {
       keywords.push('DISTINCT');
     }
     if (parser.yy.result.suggestKeywords) {
       keywords = parser.yy.result.suggestKeywords.concat(keywords);
     }
     parser.suggestKeywords(keywords);
     this.$ = { function: $$[$0-4], types: ['UDFREF'] };
   
break;
case 527:

     parser.suggestValueExpressionKeywords($$[$0-2]);
     this.$ = { function: $$[$0-5], types: ['UDFREF'] };
   
break;
case 528:

     if (parser.yy.result.suggestFunctions && !parser.yy.result.suggestFunctions.types) {
       parser.applyArgumentTypesToSuggestions($$[$0-4], 1);
     }
     this.$ = { function: $$[$0-4], types: ['UDFREF'] };
   
break;
case 529:

    this.$ = { function: $$[$0-2], types: ['UDFREF'] }
  
break;
case 530:

     parser.addFunctionArgumentLocations($$[$0-3], $$[$0-1].expressions);
     this.$ = {
       function: $$[$0-3],
       expression: $$[$0-1].expressions[$$[$0-1].expressions.length - 1].expression,
       types: ['UDFREF']
     }
   
break;
case 531:

     parser.valueExpressionSuggest();
     parser.applyArgumentTypesToSuggestions($$[$0-3], 1);
     this.$ = { function: $$[$0-3], types: ['UDFREF'] };
   
break;
case 532:

     parser.addFunctionArgumentLocations($$[$0-4], $$[$0-2].expressions);
     parser.suggestValueExpressionKeywords($$[$0-2].expressions[$$[$0-2].expressions.length - 1].expression);
     this.$ = { function: $$[$0-4], types: ['UDFREF'] };
   
break;
case 533:

     parser.addFunctionArgumentLocations($$[$0-3], $$[$0-1].expressions);
     parser.applyArgumentTypesToSuggestions($$[$0-3], $$[$0-1].activePosition);
     this.$ = { function: $$[$0-3], types: ['UDFREF'] };
   
break;
case 538:

     var expression = $$[$0-3];
     parser.extractExpressionText(expression, $$[$0-3], $$[$0-2], $$[$0-1]);
     parser.addFunctionArgumentLocations($$[$0-5], [{
       expression: expression,
       location: {
         first_line: _$[$0-3].first_line,
         last_line: _$[$0-1].last_line,
         first_column: _$[$0-3].first_column,
         last_column: _$[$0-1].last_column
       }
     }]);
     this.$ = { types: [ $$[$0-1].toUpperCase() ] }
   
break;
case 539: case 544: case 545: case 1012:
this.$ = { types: [ 'T' ] };
break;
case 540:

     parser.valueExpressionSuggest();
     this.$ = { types: [ $$[$0-1].toUpperCase() ] };
   
break;
case 541: case 542:

     parser.valueExpressionSuggest();
     this.$ = { types: [ 'T' ] };
   
break;
case 543:
this.$ = { types: [ $$[$0-1].toUpperCase() ] };
break;
case 546:

     parser.suggestValueExpressionKeywords($$[$0-3], [{ value: 'AS', weight: 2 }]);
     this.$ =  { types: [ $$[$0-1].toUpperCase() ] };
   
break;
case 547:

     parser.suggestValueExpressionKeywords($$[$0-2], [{ value: 'AS', weight: 2 }]);
     this.$ = { types: [ 'T' ] };
   
break;
case 548: case 549:

     parser.suggestKeywords(parser.getTypeKeywords());
     this.$ = { types: [ 'T' ] };
   
break;
case 550:

     // We need to handle arbitrary UDFs here instead of inside UserDefinedFunction or there will be a conflict
     // with columnReference for functions like: db.udf(foo)
     var fn = $$[$0-1].chain[$$[$0-1].chain.length - 1].name.toLowerCase();
     parser.addFunctionArgumentLocations(fn, $$[$0].expressions, $$[$0-1].chain);
     if ($$[$0-1].lastLoc && $$[$0-1].lastLoc.location) {
       $$[$0-1].lastLoc.type = 'function';
       $$[$0-1].lastLoc.function = fn;
       $$[$0-1].lastLoc.location = {
         first_line: $$[$0-1].lastLoc.location.first_line,
         last_line: $$[$0-1].lastLoc.location.last_line,
         first_column: $$[$0-1].lastLoc.location.first_column,
         last_column: $$[$0-1].lastLoc.location.last_column - 1
       }
       if ($$[$0-1].lastLoc !== $$[$0-1].firstLoc) {
          $$[$0-1].firstLoc.type = 'database';
       } else {
         delete $$[$0-1].lastLoc.identifierChain;
       }
     }
     if ($$[$0].expressions && $$[$0].expressions.length) {
       this.$ = { function: fn, expression: $$[$0].expressions[$$[$0].expressions.length - 1].expression, types: ['UDFREF'] }
     } else {
       this.$ = { function: fn, types: ['UDFREF'] }
     }
   
break;
case 551:

    parser.addFunctionLocation(_$[$0-1], $$[$0-1]);
    if ($$[$0].expressions && $$[$0].expressions.length) {
      this.$ = { function: $$[$0-1], expression: $$[$0].expressions[$$[$0].expressions.length - 1].expression, types: ['UDFREF'] }
    } else {
      this.$ = { function: $$[$0-1], types: ['UDFREF'] }
    }
  
break;
case 554:
this.$ = { types: ['COLREF'], columnReference: $$[$0].chain };
break;
case 555:
this.$ = { types: [ 'NULL' ], text: $$[$0] };
break;
case 556:

     var fn = $$[$0-1].chain[$$[$0-1].chain.length - 1].name.toLowerCase();
     parser.addFunctionArgumentLocations(fn, $$[$0].expressions, $$[$0-1].chain);
     $$[$0-1].lastLoc.type = 'function';
     $$[$0-1].lastLoc.function = fn;
     $$[$0-1].lastLoc.location = {
       first_line: $$[$0-1].lastLoc.location.first_line,
       last_line: $$[$0-1].lastLoc.location.last_line,
       first_column: $$[$0-1].lastLoc.location.first_column,
       last_column: $$[$0-1].lastLoc.location.last_column - 1
     }
     if ($$[$0-1].lastLoc !== $$[$0-1].firstLoc) {
        $$[$0-1].firstLoc.type = 'database';
     } else {
       delete $$[$0-1].lastLoc.identifierChain;
     }
     if ($$[$0].activePosition) {
       parser.applyArgumentTypesToSuggestions(fn, $$[$0].activePosition);
     }
     this.$ = { function: fn, types: ['UDFREF'] };
   
break;
case 557: case 563: case 564:

     parser.addFunctionLocation(_$[$0-1], $$[$0-1]);
     parser.addFunctionArgumentLocations($$[$0-1], $$[$0].expressions);
     if ($$[$0].activePosition) {
       parser.applyArgumentTypesToSuggestions($$[$0-1], $$[$0].activePosition);
     }
     this.$ = { function: $$[$0-1], types: ['UDFREF'] };
   
break;
case 560:

     if ($$[$0].suggestKeywords) {
       this.$ = { types: ['COLREF'], columnReference: $$[$0], suggestKeywords: $$[$0].suggestKeywords };
     } else {
       this.$ = { types: ['COLREF'], columnReference: $$[$0] };
     }
   
break;
case 561: case 562:

     parser.addFunctionLocation(_$[$0-1], $$[$0-1]);
     parser.addFunctionArgumentLocations($$[$0-1], $$[$0].expressions);
     if ($$[$0].expressions && $$[$0].expressions.length) {
       this.$ = { function: $$[$0-1], expression: $$[$0].expressions[$$[$0].expressions.length - 1].expression, types: ['UDFREF'] }
     } else {
       this.$ = { function: $$[$0-1], types: ['UDFREF'] }
     }
   
break;
case 567:

     parser.valueExpressionSuggest();
     this.$ = {
       activePosition: 1,
       expressions: [{ expression: { text: '' }, location: _$[$0-1] }]
     }
   
break;
case 568:

     parser.suggestValueExpressionKeywords($$[$0-2].expressions[$$[$0-2].expressions.length - 1].expression);
     this.$ = $$[$0-3];
   
break;
case 570: case 572:

     this.$ = {
       activePosition: 1,
       expressions: [{ expression: $$[$0], location: _$[$0] }]
     }
   
break;
case 571: case 573:

     this.$ = {
       activePosition: $$[$0-2].activePosition + 1,
       expressions: $$[$0-2].expressions.concat([{ expression: $$[$0], location: _$[$0] }])
     }
   
break;
case 574:

     this.$ = {
       activePosition: 1,
       expressions: [{ expression: $$[$0-2], location: _$[$0-2] }].concat($$[$0].expressions)
     }
   
break;
case 575:

     this.$ = {
       activePosition: $$[$0-4].activePosition + 1,
       expressions: $$[$0-4].expressions.concat([{ expression: $$[$0-2], location: _$[$0-2] }]).concat($$[$0].expressions)
     }
   
break;
case 576:

     parser.valueExpressionSuggest();
     this.$ = {
       activePosition: $$[$0-2].activePosition + 1,
       expressions: $$[$0-2].expressions.concat([{ expression: { text: '' }, location: _$[$0] }])
     }
   
break;
case 577:

     parser.valueExpressionSuggest();
     this.$ = {
       activePosition: $$[$0-4].activePosition + 1,
       expressions: $$[$0-4].expressions.concat([{ expression: { text: '' }, location: _$[$0-2] }]).concat($$[$0].expressions)
     }
   
break;
case 578:

     parser.suggestValueExpressionKeywords($$[$0-3].expressions[$$[$0-3].expressions.length - 1].expression);
     this.$ = {
       activePosition: $$[$0-3].activePosition,
       expressions: $$[$0-3].expressions.concat($$[$0].expressions)
     }
   
break;
case 579:

     parser.valueExpressionSuggest();
     this.$ = {
       cursorAtStart : true,
       activePosition: 1,
       expressions: [{ expression: { text: '' }, location: _$[$0-2] }].concat($$[$0].expressions)
     };
   
break;
case 580:

     parser.valueExpressionSuggest();
     this.$ = {
       cursorAtStart : true,
       activePosition: 1,
       expressions: [{ expression: { text: '' }, location: _$[$0-1] }, { expression: { text: '' }, location: _$[$0] }]
     };
   
break;
case 581:

     parser.valueExpressionSuggest();
     this.$ = {
       activePosition: 2,
       expressions: [{ expression: { text: '' }, location: _$[$0-1] }, { expression: { text: '' }, location: _$[$0] }]
     };
   
break;
case 582:

     parser.valueExpressionSuggest();
     this.$ = {
       activePosition: 2,
       expressions: [{ expression: { text: '' }, location: _$[$0-3] }, { expression: { text: '' }, location: _$[$0-2] }].concat($$[$0].expressions)
     };
   
break;
case 594:

     parser.suggestKeywords([ 'WHERE' ]);
   
break;
case 595:

     parser.suggestKeywords([ 'SET' ]);
   
break;
case 611:

     parser.suggestKeywords([ '=' ]);
   
break;
case 620:

     if (! parser.yy.cursorFound) {
       parser.yy.result.useDatabase = $$[$0];
     }
   
break;
case 621: case 840:

     parser.suggestDatabases();
   
break;
case 623: case 624:

     return parser.yy.result;
   
break;
case 625:

     parser.prepareNewStatement();
   
break;
case 627: case 629: case 631:

     parser.addStatementLocation(_$[$0]);
   
break;
case 630: case 632:

     parser.addStatementLocation(_$[$0-3]);
   
break;
case 636:

     parser.suggestDdlAndDmlKeywords();
   
break;
case 765: case 768: case 854:
this.$ = '';
break;
case 780: case 783:

     parser.yy.correlatedSubQuery = false;
   
break;
case 781: case 785:

     parser.suggestKeywords(['EXISTS']);
   
break;
case 784:

     parser.suggestKeywords(['NOT EXISTS']);
   
break;
case 795: case 797: case 798: case 800:

     parser.suggestKeywords(['<', '<=', '<>', '=', '>', '>=']);
   
break;
case 829: case 855:

     parser.addTableLocation(_$[$0], [ { name: $$[$0] } ]);
     this.$ = { identifierChain: [ { name: $$[$0] } ] };
   
break;
case 830: case 856:

     parser.addDatabaseLocation(_$[$0-2], [ { name: $$[$0-2] } ]);
     parser.addTableLocation(_$[$0], [ { name: $$[$0-2] }, { name: $$[$0] } ]);
     this.$ = { identifierChain: [ { name: $$[$0-2] }, { name: $$[$0] } ] };
   
break;
case 832: case 837:

     parser.suggestDatabases();
     this.$ = { identifierChain: [{ name: $$[$0-2] }] };
   
break;
case 833: case 858:

     parser.suggestTablesOrColumns($$[$0-2]);
   
break;
case 834:
this.$ = [{ name: $$[$0] }];
break;
case 835:
this.$ = [{ name: $$[$0-2] }, { name: $$[$0-1] }];
break;
case 836:

     parser.suggestDatabases({ appendDot: true });
   
break;
case 857:

     parser.suggestTables();
     parser.suggestDatabases({ prependDot: true });
   
break;
case 860:
this.$ = { identifierChain: $$[$0-1].identifierChain, alias: $$[$0] };
break;
case 863:

     parser.yy.locations[parser.yy.locations.length - 1].type = 'column';
   
break;
case 864: case 1029:

     parser.addAsteriskLocation(_$[$0], $$[$0-2].concat({ asterisk: true }));
   
break;
case 866:

     this.$ = [ $$[$0].identifier ];
     parser.yy.firstChainLocation = parser.addUnknownLocation($$[$0].location, [ $$[$0].identifier ]);
   
break;
case 867:

     if (parser.yy.firstChainLocation) {
       parser.yy.firstChainLocation.firstInChain = true;
       delete parser.yy.firstChainLocation;
     }
     $$[$0-2].push($$[$0].identifier);
     parser.addUnknownLocation($$[$0].location, $$[$0-2].concat());
   
break;
case 868:

     parser.suggestColumns({
       identifierChain: $$[$0-2]
     });
     this.$ = { suggestKeywords: [{ value: '*', weight: 10000 }] };
   
break;
case 869:

     parser.suggestColumns({
       identifierChain: $$[$0-4]
     });
     this.$ = { suggestKeywords: [{ value: '*', weight: 10000 }] };
   
break;
case 870:
this.$ = [ $$[$0].identifier ];
break;
case 871:

     $$[$0-2].push($$[$0].identifier);
   
break;
case 873:

     parser.suggestColumns({ identifierChain: $$[$0-2] });
   
break;
case 874:

     parser.suggestColumns({ identifierChain: $$[$0-4] });
   
break;
case 876:
this.$ = { identifier: { name: $$[$0] }, location: _$[$0] };
break;
case 897: case 898:

     // verifyType($$[$0], 'BOOLEAN');
     this.$ = { types: [ 'BOOLEAN' ] };
     parser.extractExpressionText(this.$, $$[$0-1], $$[$0]);
   
break;
case 899: case 924:

     this.$ = $$[$0];
     parser.extractExpressionText(this.$, $$[$0-1], $$[$0]);
   
break;
case 900:

     // verifyType($$[$0], 'NUMBER');
     this.$ = $$[$0];
     $$[$0].types = ['NUMBER'];
     parser.extractExpressionText(this.$, $$[$0-1], $$[$0]);
   
break;
case 901: case 902: case 903:

     this.$ = { types: [ 'BOOLEAN' ] };
     parser.extractExpressionText(this.$, $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]);
   
break;
case 904:

     this.$ = { types: [ 'BOOLEAN' ] };
     parser.extractExpressionText(this.$, $$[$0-5], $$[$0-4], $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]);
   
break;
case 905:

     this.$ = { types: [ 'BOOLEAN' ] };
     // clear correlated flag after completed sub-query (set by lexer)
     parser.yy.correlatedSubQuery = false;
   
break;
case 907: case 908: case 909: case 910:

     parser.addColRefToVariableIfExists($$[$0-2], $$[$0]);
     this.$ = { types: [ 'BOOLEAN' ] };
     parser.extractExpressionText(this.$, $$[$0-2], $$[$0-1], $$[$0]);
   
break;
case 911: case 912: case 913: case 914: case 944: case 1002: case 1003:
this.$ = { types: [ 'BOOLEAN' ] };
break;
case 915:

     this.$ = { types: [ 'BOOLEAN' ] }
     parser.extractExpressionText(this.$, $$[$0-5], $$[$0-4], $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]);
   
break;
case 916:

     this.$ = { types: [ 'BOOLEAN' ] }
     parser.extractExpressionText(this.$, $$[$0-4], $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]);
   
break;
case 917: case 918:

     // verifyType($$[$0-2], 'BOOLEAN');
     // verifyType($$[$0], 'BOOLEAN');
     this.$ = { types: [ 'BOOLEAN' ] };
     parser.extractExpressionText(this.$, $$[$0-2], $$[$0-1], $$[$0]);
   
break;
case 919: case 920: case 921:

     // verifyType($$[$0-2], 'NUMBER');
     // verifyType($$[$0], 'NUMBER');
     this.$ = { types: [ 'NUMBER' ] };
     parser.extractExpressionText(this.$, $$[$0-2], $$[$0-1], $$[$0]);
   
break;
case 922:

     this.$ = { types: [ 'BOOLEAN' ] };
     parser.extractExpressionText(this.$, $$[$0-1], $$[$0]);
   
break;
case 923:

     this.$ = { types: [ 'BOOLEAN' ] };
     parser.extractExpressionText(this.$, $$[$0-2], $$[$0-1], $$[$0]);
   
break;
case 925:

     this.$ = $$[$0];
     parser.extractExpressionText(this.$, $$[$0-2], $$[$0-1], $$[$0]);
   
break;
case 927:

     parser.suggestKeywords(['BETWEEN', 'EXISTS', 'IN', 'LIKE', 'REGEXP', 'RLIKE']);
     this.$ = { types: [ 'BOOLEAN' ] };
   
break;
case 928: case 930:
this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0].suggestFilters };
break;
case 929:

     parser.suggestFunctions();
     parser.suggestColumns();
     parser.suggestKeywords(['EXISTS']);
     this.$ = { types: [ 'BOOLEAN' ] };
   
break;
case 931:

     parser.suggestFunctions({ types: [ 'BOOLEAN' ] });
     parser.suggestColumns({ types: [ 'BOOLEAN' ] });
     this.$ = { types: [ 'BOOLEAN' ] };
   
break;
case 932:
this.$ = { types: [ 'T' ], suggestFilters: $$[$0].suggestFilters };
break;
case 933:

     parser.suggestFunctions();
     parser.suggestColumns();
     this.$ = { types: [ 'T' ] };
   
break;
case 934:

     if (!$$[$0].typeSet) {
       parser.applyTypeToSuggestions({ types: ['NUMBER'] });
     }
     this.$ = { types: [ 'NUMBER' ], suggestFilters: $$[$0].suggestFilters };
   
break;
case 935:

     parser.suggestFunctions({ types: [ 'NUMBER' ] });
     parser.suggestColumns({ types: [ 'NUMBER' ] });
     this.$ = { types: [ 'NUMBER' ] };
   
break;
case 936:

     parser.suggestKeywords(['FALSE', 'NOT NULL', 'NOT TRUE', 'NOT FALSE', 'NULL', 'TRUE']);
     this.$ = { types: [ 'BOOLEAN' ] };
   
break;
case 937:

     parser.suggestKeywords(['FALSE', 'NULL', 'TRUE']);
     this.$ = { types: [ 'BOOLEAN' ] };
   
break;
case 938:

     this.$ = { types: [ 'BOOLEAN' ] };
   
break;
case 939: case 940: case 941:

     parser.suggestKeywords(['NOT']);
     this.$ = { types: [ 'BOOLEAN' ] };
   
break;
case 942:

     parser.valueExpressionSuggest($$[$0-5], $$[$0-3] ? 'IS NOT DISTINCT FROM' : 'IS DISTINCT FROM');
     this.$ = { types: [ 'BOOLEAN' ] };
   
break;
case 943:

     this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0].suggestFilters }
   
break;
case 945:

     this.$ = $$[$0-1];
   
break;
case 946:

     parser.valueExpressionSuggest();
     this.$ = { types: ['T'], typeSet: true };
   
break;
case 947:

     parser.valueExpressionSuggest($$[$0], $$[$0-1]);
     parser.applyTypeToSuggestions($$[$0]);
     this.$ = { types: [ 'BOOLEAN' ], typeSet: true };
   
break;
case 948: case 949: case 950:

     parser.valueExpressionSuggest($$[$0], $$[$0-1]);
     parser.applyTypeToSuggestions($$[$0]);
     this.$ = { types: [ 'BOOLEAN' ], typeSet: true  };
   
break;
case 951: case 952: case 953: case 954:

     if (!$$[$0-2].typeSet) {
       parser.applyTypeToSuggestions($$[$0]);
       parser.addColRefIfExists($$[$0]);
     }
     this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0-2].suggestFilters }
   
break;
case 955: case 957:

     parser.valueExpressionSuggest($$[$0-2], $$[$0-1]);
     parser.applyTypeToSuggestions($$[$0-2]);
     this.$ = { types: [ 'BOOLEAN' ], typeSet: true  };
   
break;
case 956:

     parser.valueExpressionSuggest($$[$0-2], $$[$0-1]);
     parser.applyTypeToSuggestions($$[$0-2]);
     this.$ = { types: [ 'BOOLEAN' ] , typeSet: true, endsWithLessThanOrEqual: true };
   
break;
case 958:

     parser.valueExpressionSuggest($$[$0-2], $$[$0-1]);
     parser.applyTypeToSuggestions($$[$0-2]);
     this.$ = { types: [ 'BOOLEAN' ], typeSet: true, endsWithLessThanOrEqual: $$[$0-1] === '<='  };
   
break;
case 959: case 960: case 961: case 962:

     if (!$$[$0].typeSet) {
       parser.applyTypeToSuggestions($$[$0-2]);
       parser.addColRefIfExists($$[$0-2]);
     }
     this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0].suggestFilters }
   
break;
case 963:

     if ($$[$0].inValueEdit) {
       parser.valueExpressionSuggest($$[$0-3], $$[$0-2] + ' ' + $$[$0-1]);
       parser.applyTypeToSuggestions($$[$0-3]);
     }
     if ($$[$0].cursorAtStart) {
       parser.suggestKeywords(['SELECT']);
     }
     this.$ = { types: [ 'BOOLEAN' ], typeSet: true  };
   
break;
case 964:

     if ($$[$0].inValueEdit) {
       parser.valueExpressionSuggest($$[$0-2], $$[$0-1]);
       parser.applyTypeToSuggestions($$[$0-2]);
     }
     if ($$[$0].cursorAtStart) {
       parser.suggestKeywords(['SELECT']);
     }
     this.$ = { types: [ 'BOOLEAN' ], typeSet: true  };
   
break;
case 965: case 966:
this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0-5].suggestFilters };
break;
case 967: case 968:
this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0-4].suggestFilters };
break;
case 969:

     if ($$[$0-2].types[0] === $$[$0].types[0] && !$$[$0-5].typeSet) {
       parser.applyTypeToSuggestions($$[$0-2]);
     }
     this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0-5].suggestFilters };
   
break;
case 970:

     if ($$[$0-5].types[0] === $$[$0].types[0] && !$$[$0-2].typeSet) {
       parser.applyTypeToSuggestions($$[$0-5]);
     }
     this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0-2].suggestFilters };
   
break;
case 971:

     if ($$[$0-5].types[0] === $$[$0-2].types[0] && !$$[$0].typeSet) {
       parser.applyTypeToSuggestions($$[$0-5]);
     }
     this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0].suggestFilters };
   
break;
case 972:

     parser.valueExpressionSuggest($$[$0-5], $$[$0-1]);
     this.$ = { types: [ 'BOOLEAN' ], typeSet: true  };
   
break;
case 973: case 979:

     parser.suggestValueExpressionKeywords($$[$0-1], ['AND']);
     this.$ = { types: [ 'BOOLEAN' ] };
   
break;
case 974:

     parser.valueExpressionSuggest($$[$0-3], $$[$0-2] + ' ' + $$[$0-1]);
     this.$ = { types: [ 'BOOLEAN' ], typeSet: true  };
   
break;
case 975:

     if ($$[$0-4].types[0] === $$[$0-2].types[0] && !$$[$0-4].typeSet) {
       parser.applyTypeToSuggestions($$[$0-4])
     }
     this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0-4].suggestFilters };
   
break;
case 976:

     if ($$[$0-4].types[0] === $$[$0-2].types[0] && !$$[$0-2].typeSet) {
       parser.applyTypeToSuggestions($$[$0-4])
     }
     this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0-2].suggestFilters };
   
break;
case 977:

     if ($$[$0-4].types[0] === $$[$0-2].types[0] && !$$[$0].typeSet) {
       parser.applyTypeToSuggestions($$[$0-4])
     }
     this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0].suggestFilters };
   
break;
case 978:

     parser.valueExpressionSuggest($$[$0-4], $$[$0-1]);
     parser.applyTypeToSuggestions($$[$0-4]);
     this.$ = { types: [ 'BOOLEAN' ], typeSet: true  };
   
break;
case 980:

     parser.valueExpressionSuggest($$[$0-2], $$[$0-1]);
     parser.applyTypeToSuggestions($$[$0-2]);
     this.$ = { types: [ 'BOOLEAN' ], typeSet: true };
   
break;
case 981: case 983: case 985: case 987:

     parser.valueExpressionSuggest(undefined, $$[$0-1]);
     this.$ = { types: [ 'BOOLEAN' ], typeSet: true, suggestFilters: true };
   
break;
case 982: case 986:

     parser.addColRefIfExists($$[$0]);
     this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0-2].suggestFilters }
   
break;
case 984: case 988:

     parser.addColRefIfExists($$[$0-2]);
     this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0].suggestFilters }
   
break;
case 989: case 990:

     parser.valueExpressionSuggest(undefined, $$[$0-1]);
     parser.applyTypeToSuggestions({ types: [ 'NUMBER' ] });
     this.$ = { types: [ 'NUMBER' ], typeSet: true };
   
break;
case 991: case 992: case 993:

     if (!$$[$0-2].typeSet) {
       parser.applyTypeToSuggestions({ types: ['NUMBER'] });
       parser.addColRefIfExists($$[$0]);
     }
     this.$ = { types: [ 'NUMBER' ], suggestFilters: $$[$0-2].suggestFilters }
   
break;
case 994: case 995: case 996:

     parser.valueExpressionSuggest(undefined, $$[$0-1]);
     parser.applyTypeToSuggestions({ types: ['NUMBER'] });
     this.$ = { types: [ 'NUMBER' ], typeSet: true };
   
break;
case 997: case 998: case 999:

     if (!$$[$0].typeSet) {
       parser.applyTypeToSuggestions({ types: ['NUMBER'] });
       parser.addColRefIfExists($$[$0-2]);
     }
     this.$ = { types: [ 'NUMBER' ], suggestFilters: $$[$0].suggestFilters };
   
break;
case 1000:
this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0-1].suggestFilters };
break;
case 1001:
this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0-2].suggestFilters };
break;
case 1004:

     parser.valueExpressionSuggest(undefined, $$[$0]);
     parser.applyTypeToSuggestions({ types: [ 'STRING' ] });
     this.$ = { types: [ 'BOOLEAN' ], typeSet: true };
   
break;
case 1005:

     parser.valueExpressionSuggest(undefined, $$[$0-1] + ' ' + $$[$0]);
     parser.applyTypeToSuggestions({ types: [ 'STRING' ] });
     this.$ = { types: [ 'BOOLEAN' ], typeSet: true };
   
break;
case 1007:

     parser.valueExpressionSuggest();
     parser.suggestKeywords(['WHEN']);
     this.$ = { types: [ 'T' ], typeSet: true };
   
break;
case 1009:

     parser.suggestValueExpressionKeywords($$[$0-2], ['WHEN']);
     this.$ = { types: [ 'T' ], typeSet: true };
   
break;
case 1010:

      this.$ = $$[$0];
      this.$.suggestFilters = $$[$0-1].suggestFilters;
    
break;
case 1011:
this.$ = { types: [ 'T' ], suggestFilters: $$[$0-1].suggestFilters };
break;
case 1013: case 1015:

     $$[$0].position = 1;
   
break;
case 1014:

     $$[$0].position = $$[$0-2].position + 1;
     this.$ = $$[$0];
   
break;
case 1016:

     $$[$0-2].position += 1;
   
break;
case 1017:

     $$[$0-2].position = 1;
   
break;
case 1018:

     $$[$0-4].position += 1;
   
break;
case 1019:

     parser.valueExpressionSuggest();
     $$[$0-2].position += 1;
   
break;
case 1020:

     parser.valueExpressionSuggest();
     $$[$0-4].position += 1;
   
break;
case 1021:

     parser.suggestValueExpressionKeywords($$[$0-3]);
   
break;
case 1022: case 1023:

     parser.valueExpressionSuggest();
     this.$ = { cursorAtStart : true, position: 1 };
   
break;
case 1024: case 1025:

     parser.valueExpressionSuggest();
     this.$ = { position: 2 };
   
break;
case 1028:

     var lastLoc = parser.yy.locations[parser.yy.locations.length - 1];
     if (lastLoc.type !== 'variable') {
       lastLoc.type = 'column';
     }
     // used for function references with db prefix
     var firstLoc = parser.yy.locations[parser.yy.locations.length - $$[$0].length];
     this.$ = { chain: $$[$0], firstLoc: firstLoc, lastLoc: lastLoc }
   
break;
case 1035:

     parser.suggestValues($$[$0]);
   
break;
case 1036:
this.$ = { types: [ 'NUMBER' ], text: $$[$0] };
break;
case 1042: case 1044: case 1045:
this.$ = $$[$0-1] + $$[$0];
break;
case 1043: case 1046:
this.$ = $$[$0-2] + $$[$0-1] + $$[$0];
break;
case 1047:
this.$ = $$[$0-3] + $$[$0-2] + $$[$0-1] + $$[$0];
break;
case 1048:

     if (/\$\{[^}]*\}/.test($$[$0])) {
       parser.addVariableLocation(_$[$0], $$[$0]);
       this.$ = { types: [ 'STRING' ], columnReference: [{ name: $$[$0] }], text: "'" + $$[$0] + "'" }
     } else {
       this.$ = { types: [ 'STRING' ] }
     }
   
break;
case 1049:

     if (/\$\{[^}]*\}/.test($$[$0])) {
       parser.addVariableLocation(_$[$0], $$[$0]);
       this.$ = { types: [ 'STRING' ], columnReference: [{ name: $$[$0] }], text: '"' + $$[$0] + '"' }
     } else {
       this.$ = { types: [ 'STRING' ], text: '"' + $$[$0] + '"' }
     }
   
break;
case 1050:
this.$ = { types: [ 'BOOLEAN' ], text: $$[$0] };
break;
case 1051:

    this.$ = { partialQuote: '\'', missingEndQuote: parser.yy.missingEndQuote };
  
break;
case 1052:

    this.$ = { partialQuote: '"', missingEndQuote: parser.yy.missingEndQuote };
  
break;
case 1059:

     this.$ = $$[$0];

     if (parser.yy.latestTablePrimaries.length > 0) {
       var idx = parser.yy.latestTablePrimaries.length - 1;
       var tables = [];
       do {
         var tablePrimary = parser.yy.latestTablePrimaries[idx];
         if (!tablePrimary.subQueryAlias) {
           tables.unshift(tablePrimary.alias ? { identifierChain: tablePrimary.identifierChain, alias: tablePrimary.alias } : { identifierChain: tablePrimary.identifierChain })
         }
         idx--;
       } while (idx >= 0 && tablePrimary.join && !tablePrimary.subQueryAlias)

       if (tables.length > 0) {
         this.$.suggestJoins = {
           prependJoin: true,
           tables: tables
         };
       }
      }
   
break;
case 1066:

     this.$ = {
       primary: $$[$0-1]
     }
     if ($$[$0-1].identifierChain) {
       if ($$[$0]) {
         $$[$0-1].alias = $$[$0].alias
         parser.addTableAliasLocation($$[$0].location, $$[$0].alias, $$[$0-1].identifierChain);
       }
       parser.addTablePrimary($$[$0-1]);
     }

     var keywords = [];
     if (!$$[$0]) {
       keywords = ['AS'];
     } else if ($$[$0].suggestKeywords) {
       keywords = $$[$0].suggestKeywords;
     }
     if (keywords.length > 0) {
       this.$.suggestKeywords = keywords;
     }
   
break;
case 1067:

     this.$ = {
       primary: $$[$0-1]
     };

     if ($$[$0]) {
       this.$.primary.alias = $$[$0].alias;
       parser.addTablePrimary({ subQueryAlias: $$[$0].alias });
       parser.addSubqueryAliasLocation($$[$0].location, $$[$0].alias, $$[$0-1].identifierChain);
     }

     var keywords = [];
     if (!$$[$0]) {
       keywords = ['AS'];
     }
     if (keywords.length > 0) {
       this.$.suggestKeywords = keywords;
     }
   
break;
case 1068:

     if ($$[$0]) {
       parser.addTableAliasLocation($$[$0].location, $$[$0].alias, $$[$0-1].identifierChain);
     }
   
break;
case 1069:

     if ($$[$0]) {
       parser.addTablePrimary({ subQueryAlias: $$[$0].alias });
       parser.addSubqueryAliasLocation($$[$0].location, $$[$0].alias);
     }
   
break;
case 1079:

     parser.pushQueryState();
   
break;
case 1080:

     parser.popQueryState();
   
break;
case 1082:

     if ($$[$0-1]) {
       $$[$0-2].alias = $$[$0-1].alias;
       parser.addTablePrimary({ subQueryAlias: $$[$0-1].alias });
       parser.addSubqueryAliasLocation($$[$0-1].location, $$[$0-1].alias, $$[$0-2].identifierChain);
     }
     this.$ = $$[$0-2];
   
break;
case 1085:

     var subQuery = parser.getSubQuery($$[$0]);
     subQuery.columns.forEach(function (column) {
       parser.expandIdentifierChain({ wrapper: column });
       delete column.linked;
     });
     parser.popQueryState(subQuery);
     this.$ = subQuery;
   
break;
case 1102: case 1103: case 1104: case 1105:
this.$ = { alias: $$[$0], location: _$[$0] };
break;
case 1112: case 1113:

     if (parser.yy.result.suggestFunctions) {
       parser.suggestAggregateFunctions();
     }
   
break;
case 1114:

     if (!$$[$0-2] && !$$[$0-1]) {
       parser.suggestKeywords([{ value: 'PARTITION BY', weight: 2 }, { value: 'ORDER BY', weight: 1 }]);
     } else if (!$$[$0-2]) {
       parser.suggestKeywords(['PARTITION BY']);
     }
   
break;
case 1115:

      if (!$$[$0-1]) {
        parser.suggestValueExpressionKeywords($$[$0-3], [{ value: 'ORDER BY', weight: 2 }]);
      } else {
        parser.suggestValueExpressionKeywords($$[$0-3]);
      }
    
break;
case 1124:

      // Only allowed in last order by
      delete parser.yy.result.suggestAnalyticFunctions;
    
break;
case 1125:

      var keywords = [];
      if ($$[$0-2].suggestKeywords) {
        keywords = parser.createWeightedKeywords($$[$0-2].suggestKeywords, 2);
      }
      if (!$$[$0]) {
        keywords = keywords.concat([{ value: 'RANGE BETWEEN', weight: 1 }, { value: 'ROWS BETWEEN', weight: 1 }]);
      }
      parser.suggestKeywords(keywords);
    
break;
case 1131:

     parser.suggestKeywords(['BETWEEN']);
   
break;
case 1132:

     if (!$$[$0-2] && !$$[$0-1]) {
       parser.suggestKeywords(['CURRENT ROW', 'UNBOUNDED PRECEDING']);
     } else if (!$$[$0-1]) {
       parser.suggestKeywords(['AND']);
     }
   
break;
case 1137:

    lexer.popState();
  
break;
case 1138:

    lexer.begin('hdfs');
  
break;
case 1140:

      parser.suggestHdfs({ path: $$[$0-3] });
    
break;
case 1141:

     parser.suggestHdfs({ path: $$[$0-2] });
   
break;
case 1142:

      parser.suggestHdfs({ path: $$[$0-1] });
    
break;
case 1143:

     parser.suggestHdfs({ path: '' });
   
break;
case 1144:

      parser.suggestHdfs({ path: '' });
    
break;
case 1150:

     parser.suggestKeywords(['PRECEDING']);
   
break;
case 1151: case 1156:

     parser.suggestKeywords(['ROW']);
   
break;
case 1155:

     parser.suggestKeywords(['CURRENT ROW', 'UNBOUNDED FOLLOWING']);
   
break;
case 1157:

     parser.suggestKeywords(['FOLLOWING']);
   
break;
case 1161:
this.$ = { inValueEdit: true };
break;
case 1162:
this.$ = { inValueEdit: true, cursorAtStart: true };
break;
case 1163: case 1164: case 1165:

     this.$ = { suggestKeywords: ['NOT'] }
     parser.extractExpressionText(this.$, $$[$0-1], $$[$0]);
   
break;
case 1169: case 1170: case 1171:

     parser.suggestFunctions({ types: [ 'STRING' ] });
     parser.suggestColumns({ types: [ 'STRING' ] });
     this.$ = { types: ['BOOLEAN'] }
   
break;
case 1172:

     this.$ = parser.findCaseType($$[$0-1])
     parser.extractExpressionText(this.$, $$[$0-1], $$[$0]);
   
break;
case 1173:

     $$[$0-3].caseTypes.push($$[$0-1]);
     this.$ = parser.findCaseType($$[$0-3]);
     parser.extractExpressionText(this.$, $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]);
   
break;
case 1174:
this.$ = parser.findCaseType($$[$0-1]);
break;
case 1175:

     parser.suggestValueExpressionKeywords($$[$0-1], ['END']);
     $$[$0-3].caseTypes.push($$[$0-1]);
     this.$ = parser.findCaseType($$[$0-3]);
   
break;
case 1176:

     $$[$0-3].caseTypes.push($$[$0-1]);
     this.$ = parser.findCaseType($$[$0-3]);
   
break;
case 1177:
this.$ = parser.findCaseType($$[$0-2]);
break;
case 1178:

     if ($$[$0].toLowerCase() !== 'end') {
       parser.suggestValueExpressionKeywords($$[$0-3], [{ value: 'END', weight: 3 }, { value: 'ELSE', weight: 2 }, { value: 'WHEN', weight: 1 }]);
     } else {
       parser.suggestValueExpressionKeywords($$[$0-3], [{ value: 'ELSE', weight: 2 }, { value: 'WHEN', weight: 1 }]);
     }
     this.$ = parser.findCaseType($$[$0-3]);
   
break;
case 1179:

     if ($$[$0].toLowerCase() !== 'end') {
       parser.suggestValueExpressionKeywords($$[$0-2], [{ value: 'END', weight: 3 }, { value: 'ELSE', weight: 2 }, { value: 'WHEN', weight: 1 }]);
     } else {
       parser.suggestValueExpressionKeywords($$[$0-2], [{ value: 'ELSE', weight: 2 }, { value: 'WHEN', weight: 1 }]);
     }
     this.$ = parser.findCaseType($$[$0-2]);
   
break;
case 1180:

     $$[$0-3].caseTypes.push($$[$0-1]);
     this.$ = parser.findCaseType($$[$0-3]);
     this.$.suggestFilters = $$[$0-1].suggestFilters
   
break;
case 1181:

     parser.valueExpressionSuggest();
     this.$ = parser.findCaseType($$[$0-3]);
   
break;
case 1182:

     parser.valueExpressionSuggest();
     this.$ = { types: [ 'T' ], typeSet: true };
   
break;
case 1183:

     parser.valueExpressionSuggest();
     parser.suggestKeywords(['WHEN']);
     this.$ = $$[$0-1];
   
break;
case 1184:

     parser.valueExpressionSuggest();
     parser.suggestKeywords(['WHEN']);
     this.$ = { types: [ 'T' ] };
   
break;
case 1187:

     this.$ = { caseTypes: [ $$[$0] ], lastType: $$[$0] }
     parser.extractExpressionText(this.$, $$[$0]);
   
break;
case 1188:

     $$[$0-1].caseTypes.push($$[$0]);
     this.$ = { caseTypes: $$[$0-1].caseTypes, lastType: $$[$0] };
     parser.extractExpressionText(this.$, $$[$0-1], $$[$0]);
   
break;
case 1192:

     parser.suggestValueExpressionKeywords($$[$0-2], ['WHEN']);
   
break;
case 1194:

     this.$ = $$[$0]
     parser.extractExpressionText(this.$, $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]);
   
break;
case 1195:
this.$ = { caseTypes: [{ types: ['T'] }], suggestFilters: $$[$0].suggestFilters };
break;
case 1196:
this.$ = { caseTypes: [{ types: ['T'] }], suggestFilters: $$[$0-1].suggestFilters };
break;
case 1197:
this.$ = { caseTypes: [$$[$0]], suggestFilters: $$[$0-2].suggestFilters };
break;
case 1198: case 1199:
this.$ = { caseTypes: [$$[$0]], suggestFilters: $$[$0].suggestFilters };
break;
case 1200:

     parser.suggestKeywords(['WHEN']);
     this.$ = { caseTypes: [{ types: ['T'] }] };
   
break;
case 1201:

     parser.suggestKeywords(['WHEN']);
     this.$ = { caseTypes: [$$[$0]] };
   
break;
case 1202:

     parser.valueExpressionSuggest();
     parser.suggestKeywords(['WHEN']);
     this.$ = { caseTypes: [{ types: ['T'] }] };
   
break;
case 1203:

      parser.valueExpressionSuggest();
      parser.suggestKeywords(['WHEN']);
      this.$ = { caseTypes: [{ types: ['T'] }] };
    
break;
case 1204: case 1206:

     parser.valueExpressionSuggest();
     this.$ = { caseTypes: [{ types: ['T'] }], suggestFilters: true };
   
break;
case 1205:

     parser.valueExpressionSuggest();
     parser.suggestKeywords(['THEN']);
     this.$ = { caseTypes: [{ types: ['T'] }], suggestFilters: true };
   
break;
case 1207:

     parser.valueExpressionSuggest();
     this.$ = { caseTypes: [$$[$0]], suggestFilters: true };
   
break;
case 1208:

     parser.suggestValueExpressionKeywords($$[$0-1], ['THEN']);
     this.$ = { caseTypes: [{ types: ['T'] }] };
   
break;
case 1209:

     parser.suggestValueExpressionKeywords($$[$0-2], ['THEN']);
     this.$ = { caseTypes: [{ types: ['T'] }] };
   
break;
case 1210: case 1211: case 1212: case 1213:

     parser.valueExpressionSuggest();
     this.$ = { caseTypes: [{ types: ['T'] }] };
   
break;
}
},
table: [o($V0,$V1,{339:1,264:2}),{1:[3]},o($V2,$V3,{340:3,344:4,19:5,156:6,45:7,20:8,21:9,22:10,23:11,24:12,25:13,26:14,27:15,28:16,29:17,35:20,36:21,157:22,158:23,169:24,170:25,37:26,43:27,159:32,4:$V4,8:$V5,12:$V6,16:$V7,34:$V8,163:$V9,175:$Va,242:$Vb,272:$Vc,322:$Vd,338:$Ve}),{341:[1,38],345:[1,39]},o($V2,[2,627]),o($V2,[2,633]),o($V2,[2,634]),o($V2,[2,635]),o($V2,[2,15]),o($V2,[2,16]),o($V2,[2,17]),o($V2,[2,18]),o($V2,[2,19]),o($V2,[2,20]),o($V2,[2,21]),o($V2,[2,22]),o($V2,[2,23]),o($V2,[2,24]),{30:[1,40],31:41,60:42,64:$Vf,114:$Vg,229:$Vh,348:45,349:$Vi,350:$Vj},o($V2,[2,27]),o($V2,[2,28]),o($V2,[2,29]),o($V2,[2,245]),o($V2,[2,246]),{80:[1,50],170:49,242:$Vb},o($Vk,$Vl,{171:51,259:52,261:53,263:$Vm}),{38:55,126:[1,56]},{44:[1,57]},{40:[1,60],48:[1,61],58:58,64:[1,59],366:$Vn,384:$Vo},{40:[1,66],48:[1,67],58:64,64:[1,65],366:$Vn,384:$Vo},{40:[1,68]},{60:69,64:$Vf,114:$Vg,229:$Vh,348:45,349:$Vi,350:$Vj},o($V2,[2,247]),{60:75,64:$Vf,114:$Vg,120:74,229:$Vh,323:70,329:71,331:72,348:45,349:$Vi,350:$Vj,359:$Vp,428:73},{60:75,64:$Vf,114:$Vg,120:79,176:77,178:78,229:$Vh,348:45,349:$Vi,350:$Vj,359:$Vp},o([55,56,64,80,96,97,108,113,114,229,254,268,270,271,272,295,296,297,298,299,300,301,302,303,304,305,307,308,349,350,352,353,356,359,363,371,390,391],$Vq,{243:80,30:$Vr,248:$Vs}),{40:[1,83],48:[1,84]},{164:[1,85]},{1:[2,622]},o($V0,$V1,{264:86}),o($V2,[2,25]),{32:[1,87],268:[1,88]},o($Vt,[2,472]),o($Vu,[2,645]),o($Vu,[2,646]),o($Vu,[2,647]),o($Vu,[2,642]),o($Vu,[2,643]),o($Vu,[2,644]),o($Vk,$Vl,{259:52,261:53,171:89,263:$Vm}),{45:90,169:24,170:25,175:$Va,242:$Vb},o($Vk,[2,263]),o($Vk,[2,453],{261:91,263:$Vm}),o($Vv,[2,455]),o([30,242,248],$V1,{264:92}),o($V2,[2,30]),{80:[1,93]},{45:94,169:24,170:25,175:$Va,242:$Vb},o($Vw,$Vx,{59:95,307:$Vy}),{60:97,64:$Vf,114:$Vg,229:$Vh,348:45,349:$Vi,350:$Vj},o($Vz,$Vx,{59:98,307:$Vy}),o($Vz,$Vx,{59:99,307:$Vy}),o($VA,[2,762]),o($VA,[2,763]),o($Vz,$VB,{151:100,307:$VC}),{60:102,64:$Vf,114:$Vg,229:$Vh,348:45,349:$Vi,350:$Vj},o($Vz,$VB,{151:103,307:$VC}),o($Vz,$VB,{151:104,307:$VC}),o($Vz,$VB,{151:105,307:$VC}),o($V2,[2,620]),{16:[1,106]},{16:[2,599]},{16:[2,601]},{16:[2,859],60:75,64:$Vf,114:$Vg,120:107,229:$Vh,348:45,349:$Vi,350:$Vj,359:$Vp},o($VD,[2,855],{268:[1,108]}),o($Vu,[2,852]),{57:[1,109],359:[1,110]},o([80,242],[2,272],{86:[1,111]}),o($VE,[2,274]),{44:[1,112]},{55:$VF,56:$VG,60:75,64:$Vf,80:$VH,88:139,96:$VI,97:$VJ,108:$VK,113:$VL,114:$Vg,120:147,139:115,228:145,229:$Vh,244:113,251:114,254:$VM,268:$VN,270:$VO,271:$VP,272:$VQ,274:127,275:135,277:136,279:137,286:140,287:141,288:142,292:148,295:$VR,296:$VS,297:$VT,298:$VU,299:$VV,300:$VW,301:$VX,302:$VY,303:$VZ,304:$V_,305:$V$,306:126,307:$V01,308:$V11,309:117,310:125,312:128,348:45,349:$Vi,350:$Vj,352:$V21,353:$V31,356:$V41,359:$Vp,363:$V51,371:$V61,390:$V71,391:$V81,396:153,399:154,430:130,450:138,452:146,454:151,455:152,456:155},o($V91,[2,415]),o($V91,[2,416]),{41:171,60:75,64:$Vf,114:$Vg,120:172,229:$Vh,348:45,349:$Vi,350:$Vj,359:$Vp},{41:173,60:75,64:$Vf,114:$Vg,120:172,229:$Vh,348:45,349:$Vi,350:$Vj,359:$Vp},o($Vz,[2,259],{165:174,40:[1,175]}),o($V2,$V3,{344:4,19:5,156:6,45:7,20:8,21:9,22:10,23:11,24:12,25:13,26:14,27:15,28:16,29:17,35:20,36:21,157:22,158:23,169:24,170:25,37:26,43:27,159:32,340:176,4:$V4,8:$V5,12:$V6,16:$V7,34:$V8,163:$V9,175:$Va,242:$Vb,272:$Vc,322:$Vd,338:$Ve}),{33:177,52:180,55:$VF,56:$VG,60:178,64:$Vf,97:[1,183],114:$Vg,228:184,229:$Vh,268:$VN,269:179,270:[1,181],271:[1,182],348:45,349:$Vi,350:$Vj,353:[1,185],390:$V71,391:$V81,396:187,399:188,449:[1,186],454:151,455:152},{60:189,64:$Vf,114:$Vg,229:$Vh,348:45,349:$Vi,350:$Vj},o($Vk,[2,261]),{82:[1,190]},o($Vv,[2,456]),{30:$Vr,242:$Vq,243:191,248:$Vs},{60:75,64:$Vf,88:194,114:$Vg,120:147,229:$Vh,348:45,349:$Vi,350:$Vj,359:$Vp,410:192,426:193},o($V2,[2,38]),o($V2,[2,55],{348:45,60:195,64:$Vf,114:$Vg,229:$Vh,349:$Vi,350:$Vj}),{96:[1,196]},o($V2,[2,64]),{60:75,64:$Vf,65:197,67:198,73:199,114:$Vg,120:200,229:$Vh,348:45,349:$Vi,350:$Vj,359:$Vp},{60:75,64:$Vf,73:201,114:$Vg,120:200,229:$Vh,348:45,349:$Vi,350:$Vj,359:$Vp},{60:75,64:$Vf,114:$Vg,120:202,229:$Vh,348:45,349:$Vi,350:$Vj,359:$Vp},{371:[1,203]},o($V2,[2,230]),{41:204,60:75,64:$Vf,114:$Vg,120:172,229:$Vh,348:45,349:$Vi,350:$Vj,359:$Vp},{41:205,60:75,64:$Vf,114:$Vg,120:172,229:$Vh,348:45,349:$Vi,350:$Vj,359:$Vp},{41:206,60:75,64:$Vf,114:$Vg,120:172,229:$Vh,348:45,349:$Vi,350:$Vj,359:$Vp},{60:75,64:$Vf,88:139,114:$Vg,120:147,150:210,229:$Vh,324:207,333:208,335:209,348:45,349:$Vi,350:$Vj,359:$Vp,430:211},{16:[2,860]},{60:75,64:$Vf,114:$Vg,120:212,229:$Vh,348:45,349:$Vi,350:$Vj,359:$Vp},{359:[1,213]},o($Vu,[2,854]),{60:75,64:$Vf,114:$Vg,120:79,178:214,229:$Vh,348:45,349:$Vi,350:$Vj,359:$Vp},{80:[1,215]},o($Vv,[2,404],{245:216,182:218,86:[1,217],183:[1,219]}),o($Va1,[2,421]),o($Va1,$Vb1,{348:45,60:75,396:187,399:188,253:220,441:234,120:235,52:236,32:$Vc1,44:$Vd1,55:$VF,56:$VG,64:$Vf,78:$Ve1,96:$Vf1,109:$Vg1,110:$Vh1,114:$Vg,143:$Vi1,229:$Vh,254:$Vj1,349:$Vi,350:$Vj,353:$Vk1,357:$Vl1,358:$Vm1,359:$Vp,360:$Vn1,375:$Vo1,377:$Vp1,378:$Vq1,380:$Vr1,381:$Vs1}),o($Va1,[2,437]),o($Vt1,[2,896]),{55:$VF,56:$VG,60:75,64:$Vf,80:$VH,88:139,96:$VI,97:$VJ,108:$VK,113:$VL,114:$Vg,120:147,139:241,228:145,229:$Vh,268:$VN,270:$VO,271:$VP,272:$VQ,274:127,275:135,277:136,279:137,286:140,287:141,288:142,292:148,295:$VR,296:$VS,297:$VT,298:$VU,299:$VV,300:$VW,301:$VX,302:$VY,303:$VZ,304:$V_,305:$V$,306:126,307:$V01,308:$V11,309:117,310:125,312:128,348:45,349:$Vi,350:$Vj,352:$V21,353:$V31,356:$V41,359:$Vp,363:$V51,371:$V61,390:$V71,391:$V81,396:153,399:154,430:130,450:138,452:146,454:151,455:152,456:155},{55:$VF,56:$VG,60:75,64:$Vf,80:$VH,88:139,96:$VI,97:$VJ,108:$VK,113:$VL,114:$Vg,120:147,139:242,228:145,229:$Vh,268:$VN,270:$VO,271:$VP,272:$VQ,274:127,275:135,277:136,279:137,286:140,287:141,288:142,292:148,295:$VR,296:$VS,297:$VT,298:$VU,299:$VV,300:$VW,301:$VX,302:$VY,303:$VZ,304:$V_,305:$V$,306:126,307:$V01,308:$V11,309:117,310:125,312:128,348:45,349:$Vi,350:$Vj,352:$V21,353:$V31,356:$V41,359:$Vp,363:$V51,371:$V61,390:$V71,391:$V81,396:153,399:154,430:130,450:138,452:146,454:151,455:152,456:155},{55:$VF,56:$VG,60:75,64:$Vf,80:$VH,88:139,96:$VI,97:$VJ,108:$VK,113:$VL,114:$Vg,120:147,139:243,228:145,229:$Vh,268:$VN,270:$VO,271:$VP,272:$VQ,274:127,275:135,277:136,279:137,286:140,287:141,288:142,292:148,295:$VR,296:$VS,297:$VT,298:$VU,299:$VV,300:$VW,301:$VX,302:$VY,303:$VZ,304:$V_,305:$V$,306:126,307:$V01,308:$V11,309:117,310:125,312:128,348:45,349:$Vi,350:$Vj,352:$V21,353:$V31,356:$V41,359:$Vp,363:$V51,371:$V61,390:$V71,391:$V81,396:153,399:154,430:130,450:138,452:146,454:151,455:152,456:155},{55:$VF,56:$VG,60:75,64:$Vf,80:$VH,88:139,96:$VI,97:$VJ,108:$VK,113:$VL,114:$Vg,120:147,139:244,228:145,229:$Vh,268:$VN,270:$VO,271:$VP,272:$VQ,274:127,275:135,277:136,279:137,286:140,287:141,288:142,292:148,295:$VR,296:$VS,297:$VT,298:$VU,299:$VV,300:$VW,301:$VX,302:$VY,303:$VZ,304:$V_,305:$V$,306:126,307:$V01,308:$V11,309:117,310:125,312:128,348:45,349:$Vi,350:$Vj,352:$V21,353:$V31,356:$V41,359:$Vp,363:$V51,371:$V61,390:$V71,391:$V81,396:153,399:154,430:130,450:138,452:146,454:151,455:152,456:155},{80:$Vu1,438:245},{55:$VF,56:$VG,60:75,64:$Vf,80:$VH,88:139,96:$VI,97:$VJ,108:$VK,113:$VL,114:$Vg,120:147,139:247,228:145,229:$Vh,268:$VN,270:$VO,271:$VP,272:$VQ,274:127,275:135,277:136,279:137,286:140,287:141,288:142,292:148,295:$VR,296:$VS,297:$VT,298:$VU,299:$VV,300:$VW,301:$VX,302:$VY,303:$VZ,304:$V_,305:$V$,306:126,307:$V01,308:$V11,309:117,310:125,312:128,348:45,349:$Vi,350:$Vj,352:$V21,353:$V31,356:$V41,359:$Vp,363:$V51,371:$V61,390:$V71,391:$V81,396:153,399:154,430:130,450:138,452:146,454:151,455:152,456:155},{55:$VF,56:$VG,60:75,64:$Vf,80:$VH,88:139,96:$VI,97:$VJ,108:$VK,113:$VL,114:$Vg,120:147,139:249,228:145,229:$Vh,268:$VN,270:$VO,271:$VP,272:$VQ,274:127,275:135,277:136,279:137,286:140,287:141,288:142,292:148,295:$VR,296:$VS,297:$VT,298:$VU,299:$VV,300:$VW,301:$VX,302:$VY,303:$VZ,304:$V_,305:$V$,306:126,307:$V01,308:$V11,309:117,310:125,312:128,348:45,349:$Vi,350:$Vj,352:$V21,353:$V31,356:$V41,359:$Vp,363:$V51,371:$V61,390:$V71,391:$V81,393:$Vv1,396:153,399:154,430:130,442:248,450:138,452:146,454:151,455:152,456:155,504:250,506:251},o($Vt1,[2,554],{311:253,80:$Vw1}),{80:$Vw1,311:255},o($Vt1,[2,552]),o($Vt1,[2,553]),o($Vt1,[2,555]),o($Vx1,[2,1028],{268:[1,256]}),{80:[2,534]},{80:[2,535]},{80:[2,536]},{80:[2,537]},o($Vt1,[2,583],{276:257,278:258,319:$Vy1}),{278:260,319:$Vy1},o($Vt1,[2,491]),o($Vt1,[2,1034]),o($Vz1,[2,866]),o($VA1,[2,499]),o($VA1,[2,500]),o($VA1,[2,501]),{80:[1,261]},{80:[1,262]},o($Vt1,[2,1036]),o($Vt1,[2,1037]),o([32,44,51,55,56,64,78,80,82,86,96,108,109,110,113,114,130,143,183,191,202,215,216,217,218,219,220,221,222,227,229,233,240,241,254,263,265,268,341,345,349,350,353,357,358,359,360,361,362,364,367,368,369,370,372,375,376,377,378,380,381,383,385,386,387,388,389,392,393,440],[2,876]),{80:[1,263]},{80:[1,264]},{80:[1,265]},o($Vt1,[2,1039]),o($Vt1,[2,1040]),o($Vt1,[2,1048]),o($Vt1,[2,1049]),o($Vt1,[2,1050]),{80:[2,510]},{80:[2,511]},{80:[2,512]},{80:[2,513]},{80:[2,514]},{80:[2,515]},{80:[2,516]},{80:[2,517]},o($Vt1,[2,1041],{268:[1,266]}),{390:[1,267],391:[1,268]},{390:[1,269]},{55:[1,271],57:[1,270]},{56:[1,273],57:[1,272]},o($Vt1,[2,1053]),o($Vt1,[2,1054]),{126:[2,35]},o($VB1,[2,829],{268:[1,274]}),{44:[2,44]},{41:275,60:75,64:$Vf,114:$Vg,120:172,229:$Vh,348:45,349:$Vi,350:$Vj,359:$Vp},o($Vz,[2,260]),o($V2,[2,628]),o($V2,[2,26]),o($V2,[2,474]),o($V2,[2,475],{348:45,60:276,64:$Vf,114:$Vg,229:$Vh,349:$Vi,350:$Vj}),o($V2,[2,477]),o($V2,[2,478]),o($V2,[2,479]),o($V2,[2,480]),o($Vw,[2,1031]),{228:277,268:$VN,390:$V71,391:$V81,454:151,455:152},{228:278,268:$VN,390:$V71,391:$V81,454:151,455:152},o($VC1,[2,770]),o($VC1,[2,771]),o($Vt,[2,473]),o($Vk,$Vl,{259:52,261:53,171:279,263:$Vm}),{170:280,242:$Vb},{82:[1,281],86:[1,282]},o($VD1,[2,841]),{32:[1,283]},o($V2,$VE1,{61:284,49:285,50:286,51:$VF1}),{371:[1,288]},o($V2,[2,65]),o($VG1,[2,161],{68:289,125:290,126:[1,291]}),o($VH1,[2,77],{74:292,77:293,78:[1,294],80:[1,295]}),o($VI1,[2,834],{268:[1,296]}),o($VJ1,[2,213],{145:297,147:298,80:[1,299]}),o($V2,[2,777],{152:300,406:[1,301]}),o($Vz,[2,780]),o($V2,[2,237],{154:302,155:[1,303]}),o($V2,[2,239]),o($V2,[2,481]),o($VK1,[2,616],{325:304,86:[1,305],183:[1,306]}),o($VL1,[2,603]),{32:[1,307]},{32:[2,613]},o($VM1,[2,863],{268:[1,308]}),o($VD,[2,856]),o($Vu,[2,853]),o($VE,[2,275]),o($VN1,$VO1,{180:309,467:310}),o($Vv,[2,405]),{55:$VF,56:$VG,60:75,64:$Vf,80:$VH,88:139,96:$VI,97:$VJ,108:$VK,113:$VL,114:$Vg,120:147,139:115,228:145,229:$Vh,251:311,254:$VM,268:$VN,270:$VO,271:$VP,272:$VQ,274:127,275:135,277:136,279:137,286:140,287:141,288:142,292:148,295:$VR,296:$VS,297:$VT,298:$VU,299:$VV,300:$VW,301:$VX,302:$VY,303:$VZ,304:$V_,305:$V$,306:126,307:$V01,308:$V11,309:117,310:125,312:128,348:45,349:$Vi,350:$Vj,352:$V21,353:$V31,356:$V41,359:$Vp,363:$V51,371:$V61,390:$V71,391:$V81,396:153,399:154,430:130,450:138,452:146,454:151,455:152,456:155},o($VP1,$VQ1,{249:312,256:313,258:314,265:$VR1}),{41:323,60:75,64:$Vf,80:$Vu1,114:$Vg,120:172,184:316,187:317,208:319,229:$Vh,348:45,349:$Vi,350:$Vj,359:$Vp,438:324,457:318,459:320,461:321,462:322},o($Va1,[2,436]),o($VS1,[2,1055],{437:325,96:[1,326]}),{55:$VF,56:$VG,60:75,64:$Vf,80:$VH,88:139,96:$VI,97:$VJ,108:$VK,113:$VL,114:$Vg,120:147,139:327,228:145,229:$Vh,268:$VN,270:$VO,271:$VP,272:$VQ,274:127,275:135,277:136,279:137,286:140,287:141,288:142,292:148,295:$VR,296:$VS,297:$VT,298:$VU,299:$VV,300:$VW,301:$VX,302:$VY,303:$VZ,304:$V_,305:$V$,306:126,307:$V01,308:$V11,309:117,310:125,312:128,348:45,349:$Vi,350:$Vj,352:$V21,353:$V31,356:$V41,359:$Vp,363:$V51,371:$V61,390:$V71,391:$V81,396:153,399:154,430:130,450:138,452:146,454:151,455:152,456:155},{55:$VF,56:$VG,60:75,64:$Vf,80:$VH,88:139,96:$VI,97:$VJ,108:$VK,113:$VL,114:$Vg,120:147,139:328,228:145,229:$Vh,268:$VN,270:$VO,271:$VP,272:$VQ,274:127,275:135,277:136,279:137,286:140,287:141,288:142,292:148,295:$VR,296:$VS,297:$VT,298:$VU,299:$VV,300:$VW,301:$VX,302:$VY,303:$VZ,304:$V_,305:$V$,306:126,307:$V01,308:$V11,309:117,310:125,312:128,348:45,349:$Vi,350:$Vj,352:$V21,353:$V31,356:$V41,359:$Vp,363:$V51,371:$V61,390:$V71,391:$V81,396:153,399:154,430:130,450:138,452:146,454:151,455:152,456:155},{55:$VF,56:$VG,60:75,64:$Vf,80:$VH,88:139,96:$VI,97:$VJ,108:$VK,113:$VL,114:$Vg,120:147,139:329,228:145,229:$Vh,268:$VN,270:$VO,271:$VP,272:$VQ,274:127,275:135,277:136,279:137,286:140,287:141,288:142,292:148,295:$VR,296:$VS,297:$VT,298:$VU,299:$VV,300:$VW,301:$VX,302:$VY,303:$VZ,304:$V_,305:$V$,306:126,307:$V01,308:$V11,309:117,310:125,312:128,348:45,349:$Vi,350:$Vj,352:$V21,353:$V31,356:$V41,359:$Vp,363:$V51,371:$V61,390:$V71,391:$V81,396:153,399:154,430:130,450:138,452:146,454:151,455:152,456:155},{55:$VF,56:$VG,60:75,64:$Vf,80:$VH,88:139,96:$VI,97:$VJ,108:$VK,113:$VL,114:$Vg,120:147,139:330,228:145,229:$Vh,268:$VN,270:$VO,271:$VP,272:$VQ,274:127,275:135,277:136,279:137,286:140,287:141,288:142,292:148,295:$VR,296:$VS,297:$VT,298:$VU,299:$VV,300:$VW,301:$VX,302:$VY,303:$VZ,304:$V_,305:$V$,306:126,307:$V01,308:$V11,309:117,310:125,312:128,348:45,349:$Vi,350:$Vj,352:$V21,353:$V31,356:$V41,359:$Vp,363:$V51,371:$V61,390:$V71,391:$V81,396:153,399:154,430:130,450:138,452:146,454:151,455:152,456:155},{78:$Ve1,360:[1,332],375:[1,331],380:$Vr1,381:$Vs1,441:333},{80:[1,334]},{55:$VF,56:$VG,60:75,64:$Vf,80:$VH,88:139,96:$VI,97:$VJ,108:$VK,113:$VL,114:$Vg,120:147,139:335,228:145,229:$Vh,268:$VN,270:$VO,271:$VP,272:$VQ,274:127,275:135,277:136,279:137,286:140,287:141,288:142,292:148,295:$VR,296:$VS,297:$VT,298:$VU,299:$VV,300:$VW,301:$VX,302:$VY,303:$VZ,304:$V_,305:$V$,306:126,307:$V01,308:$V11,309:117,310:125,312:128,348:45,349:$Vi,350:$Vj,352:$V21,353:$V31,356:$V41,359:$Vp,363:$V51,371:$V61,390:$V71,391:$V81,396:153,399:154,430:130,450:138,452:146,454:151,455:152,456:155},{55:$VF,56:$VG,60:75,64:$Vf,80:$VH,88:139,96:$VI,97:$VJ,108:$VK,113:$VL,114:$Vg,120:147,139:336,228:145,229:$Vh,268:$VN,270:$VO,271:$VP,272:$VQ,274:127,275:135,277:136,279:137,286:140,287:141,288:142,292:148,295:$VR,296:$VS,297:$VT,298:$VU,299:$VV,300:$VW,301:$VX,302:$VY,303:$VZ,304:$V_,305:$V$,306:126,307:$V01,308:$V11,309:117,310:125,312:128,348:45,349:$Vi,350:$Vj,352:$V21,353:$V31,356:$V41,359:$Vp,363:$V51,371:$V61,390:$V71,391:$V81,396:153,399:154,430:130,450:138,452:146,454:151,455:152,456:155},{55:$VF,56:$VG,60:75,64:$Vf,80:$VH,88:139,96:$VI,97:$VJ,108:$VK,113:$VL,114:$Vg,120:147,139:337,228:145,229:$Vh,268:$VN,270:$VO,271:$VP,272:$VQ,274:127,275:135,277:136,279:137,286:140,287:141,288:142,292:148,295:$VR,296:$VS,297:$VT,298:$VU,299:$VV,300:$VW,301:$VX,302:$VY,303:$VZ,304:$V_,305:$V$,306:126,307:$V01,308:$V11,309:117,310:125,312:128,348:45,349:$Vi,350:$Vj,352:$V21,353:$V31,356:$V41,359:$Vp,363:$V51,371:$V61,390:$V71,391:$V81,396:153,399:154,430:130,450:138,452:146,454:151,455:152,456:155},{55:$VF,56:$VG,60:75,64:$Vf,80:$VH,88:139,96:$VI,97:$VJ,108:$VK,113:$VL,114:$Vg,120:147,139:338,228:145,229:$Vh,268:$VN,270:$VO,271:$VP,272:$VQ,274:127,275:135,277:136,279:137,286:140,287:141,288:142,292:148,295:$VR,296:$VS,297:$VT,298:$VU,299:$VV,300:$VW,301:$VX,302:$VY,303:$VZ,304:$V_,305:$V$,306:126,307:$V01,308:$V11,309:117,310:125,312:128,348:45,349:$Vi,350:$Vj,352:$V21,353:$V31,356:$V41,359:$Vp,363:$V51,371:$V61,390:$V71,391:$V81,396:153,399:154,430:130,450:138,452:146,454:151,455:152,456:155},{55:$VF,56:$VG,60:75,64:$Vf,80:$VH,88:139,96:$VI,97:$VJ,108:$VK,113:$VL,114:$Vg,120:147,139:339,228:145,229:$Vh,268:$VN,270:$VO,271:$VP,272:$VQ,274:127,275:135,277:136,279:137,286:140,287:141,288:142,292:148,295:$VR,296:$VS,297:$VT,298:$VU,299:$VV,300:$VW,301:$VX,302:$VY,303:$VZ,304:$V_,305:$V$,306:126,307:$V01,308:$V11,309:117,310:125,312:128,348:45,349:$Vi,350:$Vj,352:$V21,353:$V31,356:$V41,359:$Vp,363:$V51,371:$V61,390:$V71,391:$V81,396:153,399:154,430:130,450:138,452:146,454:151,455:152,456:155},{55:$VF,56:$VG,60:75,64:$Vf,80:$VH,88:139,96:$VI,97:$VJ,108:$VK,113:$VL,114:$Vg,120:147,139:340,228:145,229:$Vh,268:$VN,270:$VO,271:$VP,272:$VQ,274:127,275:135,277:136,279:137,286:140,287:141,288:142,292:148,295:$VR,296:$VS,297:$VT,298:$VU,299:$VV,300:$VW,301:$VX,302:$VY,303:$VZ,304:$V_,305:$V$,306:126,307:$V01,308:$V11,309:117,310:125,312:128,348:45,349:$Vi,350:$Vj,352:$V21,353:$V31,356:$V41,359:$Vp,363:$V51,371:$V61,390:$V71,391:$V81,396:153,399:154,430:130,450:138,452:146,454:151,455:152,456:155},o($Vt1,[2,922]),o($VT1,[2,1102]),o($VT1,[2,1103]),{52:342,55:$VF,56:$VG,60:75,64:$Vf,114:$Vg,120:341,229:$Vh,348:45,349:$Vi,350:$Vj,359:$Vp,396:187,399:188},{55:$VF,56:$VG,60:75,64:$Vf,80:$VH,88:139,96:$VI,97:$VJ,108:$VK,113:$VL,114:$Vg,120:147,139:343,228:145,229:$Vh,268:$VN,270:$VO,271:$VP,272:$VQ,274:127,275:135,277:136,279:137,286:140,287:141,288:142,292:148,295:$VR,296:$VS,297:$VT,298:$VU,299:$VV,300:$VW,301:$VX,302:$VY,303:$VZ,304:$V_,305:$V$,306:126,307:$V01,308:$V11,309:117,310:125,312:128,348:45,349:$Vi,350:$Vj,352:$V21,353:$V31,356:$V41,359:$Vp,363:$V51,371:$V61,390:$V71,391:$V81,396:153,399:154,430:130,450:138,452:146,454:151,455:152,456:155},{55:$VF,56:$VG,60:75,64:$Vf,80:$VH,88:139,96:$VI,97:$VJ,108:$VK,113:$VL,114:$Vg,120:147,139:344,228:145,229:$Vh,268:$VN,270:$VO,271:$VP,272:$VQ,274:127,275:135,277:136,279:137,286:140,287:141,288:142,292:148,295:$VR,296:$VS,297:$VT,298:$VU,299:$VV,300:$VW,301:$VX,302:$VY,303:$VZ,304:$V_,305:$V$,306:126,307:$V01,308:$V11,309:117,310:125,312:128,348:45,349:$Vi,350:$Vj,352:$V21,353:$V31,356:$V41,359:$Vp,363:$V51,371:$V61,390:$V71,391:$V81,396:153,399:154,430:130,450:138,452:146,454:151,455:152,456:155},{55:$VF,56:$VG,60:75,64:$Vf,80:$VH,88:139,96:$VI,97:$VJ,108:$VK,113:$VL,114:$Vg,120:147,139:345,228:145,229:$Vh,268:$VN,270:$VO,271:$VP,272:$VQ,274:127,275:135,277:136,279:137,286:140,287:141,288:142,292:148,295:$VR,296:$VS,297:$VT,298:$VU,299:$VV,300:$VW,301:$VX,302:$VY,303:$VZ,304:$V_,305:$V$,306:126,307:$V01,308:$V11,309:117,310:125,312:128,348:45,349:$Vi,350:$Vj,352:$V21,353:$V31,356:$V41,359:$Vp,363:$V51,371:$V61,390:$V71,391:$V81,396:153,399:154,430:130,450:138,452:146,454:151,455:152,456:155},o($VU1,[2,897],{441:234,32:$Vc1,78:$Ve1,109:$Vg1,110:$Vh1,143:$Vi1,254:$Vj1,353:$Vk1,358:$Vm1,375:$Vo1,377:$Vp1,380:$Vr1,381:$Vs1}),o($VU1,[2,898],{441:234,32:$Vc1,78:$Ve1,109:$Vg1,110:$Vh1,143:$Vi1,254:$Vj1,353:$Vk1,358:$Vm1,375:$Vo1,377:$Vp1,380:$Vr1,381:$Vs1}),o($VU1,[2,899],{441:234,32:$Vc1,78:$Ve1,109:$Vg1,110:$Vh1,143:$Vi1,254:$Vj1,353:$Vk1,358:$Vm1,375:$Vo1,377:$Vp1,380:$Vr1,381:$Vs1}),o($VV1,[2,900],{441:234}),o($Vt1,[2,905]),o($VN1,$VO1,{467:310,438:324,180:346,462:347,80:$Vu1}),{32:$Vc1,78:$Ve1,82:[1,348],96:$Vf1,109:$Vg1,110:$Vh1,143:$Vi1,254:$Vj1,353:$Vk1,357:$Vl1,358:$Vm1,360:$Vn1,375:$Vo1,377:$Vp1,378:$Vq1,380:$Vr1,381:$Vs1,441:234},o($Vt1,[2,924]),{32:$Vc1,78:$Ve1,96:$Vf1,109:$Vg1,110:$Vh1,143:$Vi1,254:$Vj1,353:$Vk1,357:$Vl1,358:$Vm1,360:$Vn1,375:$Vo1,377:$Vp1,378:$Vq1,380:$Vr1,381:$Vs1,393:$Vv1,441:234,442:349,504:250,506:251},{369:[1,351],370:[1,350],393:$Vv1,506:352},o($VW1,[2,1187]),{55:$VF,56:$VG,60:75,64:$Vf,80:$VH,88:139,96:$VI,97:$VJ,108:$VK,113:$VL,114:$Vg,120:147,139:353,228:145,229:$Vh,268:$VN,270:$VO,271:$VP,272:$VQ,274:127,275:135,277:136,279:137,286:140,287:141,288:142,292:148,295:$VR,296:$VS,297:$VT,298:$VU,299:$VV,300:$VW,301:$VX,302:$VY,303:$VZ,304:$V_,305:$V$,306:126,307:$V01,308:$V11,309:117,310:125,312:128,348:45,349:$Vi,350:$Vj,352:$V21,353:$V31,356:$V41,359:$Vp,363:$V51,371:$V61,390:$V71,391:$V81,396:153,399:154,430:130,450:138,452:146,454:151,455:152,456:155},o($Vt1,[2,550]),{55:$VF,56:$VG,60:75,64:$Vf,80:$VH,82:[1,354],88:139,96:$VI,97:$VJ,108:$VK,113:$VL,114:$Vg,120:147,139:356,228:145,229:$Vh,268:$VN,270:$VO,271:$VP,272:$VQ,274:127,275:135,277:136,279:137,286:140,287:141,288:142,292:148,293:355,295:$VR,296:$VS,297:$VT,298:$VU,299:$VV,300:$VW,301:$VX,302:$VY,303:$VZ,304:$V_,305:$V$,306:126,307:$V01,308:$V11,309:117,310:125,312:128,348:45,349:$Vi,350:$Vj,352:$V21,353:$V31,356:$V41,359:$Vp,363:$V51,371:$V61,390:$V71,391:$V81,396:153,399:154,430:130,450:138,452:146,454:151,455:152,456:155},o($Vt1,[2,551]),{60:75,64:$Vf,88:358,114:$Vg,120:147,229:$Vh,254:[1,357],348:45,349:$Vi,350:$Vj,359:$Vp},o($Vt1,[2,489]),o($Vt1,[2,584]),{60:75,64:$Vf,80:[1,361],114:$Vg,120:359,229:$Vh,320:360,348:45,349:$Vi,350:$Vj,359:$Vp},o($Vt1,[2,490]),{55:$VF,56:$VG,60:75,64:$Vf,80:$VH,82:[1,362],88:139,96:$VI,97:$VJ,108:$VK,113:$VL,114:$Vg,120:147,139:356,228:145,229:$Vh,268:$VN,270:$VO,271:$VP,272:$VQ,274:127,275:135,277:136,279:137,286:140,287:141,288:142,292:148,293:363,295:$VR,296:$VS,297:$VT,298:$VU,299:$VV,300:$VW,301:$VX,302:$VY,303:$VZ,304:$V_,305:$V$,306:126,307:$V01,308:$V11,309:117,310:125,312:128,348:45,349:$Vi,350:$Vj,352:$V21,353:$V31,356:$V41,359:$Vp,363:$V51,371:$V61,390:$V71,391:$V81,396:153,399:154,430:130,450:138,452:146,454:151,455:152,456:155},{55:$VF,56:$VG,60:75,64:$Vf,80:$VH,82:[1,365],88:139,96:$VI,97:$VJ,108:$VK,113:$VL,114:$Vg,120:147,139:364,228:145,229:$Vh,268:$VN,270:$VO,271:$VP,272:$VQ,274:127,275:135,277:136,279:137,286:140,287:141,288:142,292:148,295:$VR,296:$VS,297:$VT,298:$VU,299:$VV,300:$VW,301:$VX,302:$VY,303:$VZ,304:$V_,305:$V$,306:126,307:$V01,308:$V11,309:117,310:125,312:128,348:45,349:$Vi,350:$Vj,352:$V21,353:$V31,356:$V41,359:$Vp,363:$V51,371:$V61,390:$V71,391:$V81,396:153,399:154,430:130,450:138,452:146,454:151,455:152,456:155},o([55,56,64,80,82,96,97,108,113,114,229,268,270,271,272,295,296,297,298,299,300,301,302,303,304,305,307,308,349,350,352,353,356,359,363,371,390,391],$Vq,{243:366,30:$Vr,248:$Vs}),o($VX1,$Vq,{243:369,30:$Vr,82:[1,368],248:$Vs,254:[1,367]}),o($VX1,$Vq,{243:370,30:$Vr,82:[1,371],248:$Vs}),o($Vt1,[2,1042],{390:[1,372],391:[1,373]}),o($Vt1,[2,1044]),{390:[1,374]},o($Vt1,[2,1045]),{55:[1,375]},o($VY1,[2,765]),{56:[1,376]},o($VY1,[2,768]),{60:75,64:$Vf,114:$Vg,120:377,229:$Vh,348:45,349:$Vi,350:$Vj,359:$Vp},{141:[1,378]},o($V2,[2,476]),o($Vw,[2,1032]),o($Vw,[2,1033]),o($Vk,[2,262]),o($Vv,[2,461]),o($V2,[2,792]),{60:75,64:$Vf,88:194,114:$Vg,120:147,229:$Vh,348:45,349:$Vi,350:$Vj,359:$Vp,426:379},{55:$VF,56:$VG,60:75,64:$Vf,80:$VH,88:139,96:$VI,97:$VJ,108:$VK,113:$VL,114:$Vg,120:147,139:380,228:145,229:$Vh,268:$VN,270:$VO,271:$VP,272:$VQ,274:127,275:135,277:136,279:137,286:140,287:141,288:142,292:148,295:$VR,296:$VS,297:$VT,298:$VU,299:$VV,300:$VW,301:$VX,302:$VY,303:$VZ,304:$V_,305:$V$,306:126,307:$V01,308:$V11,309:117,310:125,312:128,348:45,349:$Vi,350:$Vj,352:$V21,353:$V31,356:$V41,359:$Vp,363:$V51,371:$V61,390:$V71,391:$V81,396:153,399:154,430:130,450:138,452:146,454:151,455:152,456:155},o($V2,[2,56]),o($V2,[2,62]),o([44,82,86,110,341,345],[2,48]),{52:381,55:$VF,56:$VG,396:187,399:188},o([64,114,229,341,345,349,350,359],[2,783]),o($V2,[2,199],{69:382,44:[1,383]}),o($VG1,[2,162]),{127:[1,384]},o($VH1,[2,74]),o($VH1,[2,78]),{41:385,60:75,64:$Vf,114:$Vg,120:172,229:$Vh,348:45,349:$Vi,350:$Vj,359:$Vp},{60:75,64:$Vf,81:386,85:387,88:388,114:$Vg,120:147,229:$Vh,348:45,349:$Vi,350:$Vj,359:$Vp},{60:75,64:$Vf,114:$Vg,120:389,229:$Vh,348:45,349:$Vi,350:$Vj,359:$Vp},{44:$VE1,49:390,50:286,51:$VF1},o($VJ1,[2,214]),{60:75,64:$Vf,88:139,114:$Vg,120:147,148:391,150:392,229:$Vh,348:45,349:$Vi,350:$Vj,359:$Vp,430:211},o($V2,[2,223]),o($V2,[2,778]),o($V2,[2,231]),o($V2,[2,238]),o($V2,$VQ1,{258:314,256:393,265:$VR1}),{60:75,64:$Vf,88:139,114:$Vg,120:147,150:210,229:$Vh,333:394,335:209,348:45,349:$Vi,350:$Vj,359:$Vp,430:211},{41:323,60:75,64:$Vf,80:$Vu1,114:$Vg,120:172,187:395,208:319,229:$Vh,348:45,349:$Vi,350:$Vj,359:$Vp,438:324,457:318,459:320,461:321,462:322},{55:$VF,56:$VG,60:75,64:$Vf,80:$VH,88:139,96:$VI,97:$VJ,108:$VK,113:$VL,114:$Vg,120:147,139:397,228:145,229:$Vh,268:$VN,270:$VO,271:$VP,272:$VQ,274:127,275:135,277:136,279:137,286:140,287:141,288:142,292:148,295:$VR,296:$VS,297:$VT,298:$VU,299:$VV,300:$VW,301:$VX,302:$VY,303:$VZ,304:$V_,305:$V$,306:126,307:$V01,308:$V11,309:117,310:125,312:128,336:396,348:45,349:$Vi,350:$Vj,352:$V21,353:$V31,356:$V41,359:$Vp,363:$V51,371:$V61,390:$V71,391:$V81,396:153,399:154,430:130,450:138,452:146,454:151,455:152,456:155},{60:75,64:$Vf,88:358,114:$Vg,120:147,229:$Vh,254:[1,398],348:45,349:$Vi,350:$Vj,359:$Vp},{82:[1,399]},{45:407,169:24,170:25,175:$Va,242:$Vb,469:400,471:401,473:402,475:403,477:404,479:405,481:406},o($Va1,[2,422]),o($Vv,[2,417]),o($VZ1,[2,294],{189:408,190:409,191:[1,410]}),o($VP1,[2,466]),{55:$VF,56:$VG,60:75,64:$Vf,80:$VH,88:139,96:$VI,97:$VJ,108:$VK,113:$VL,114:$Vg,120:147,139:412,228:145,229:$Vh,266:411,268:$VN,270:$VO,271:$VP,272:$VQ,274:127,275:135,277:136,279:137,286:140,287:141,288:142,292:148,295:$VR,296:$VS,297:$VT,298:$VU,299:$VV,300:$VW,301:$VX,302:$VY,303:$VZ,304:$V_,305:$V$,306:126,307:$V01,308:$V11,309:117,310:125,312:128,348:45,349:$Vi,350:$Vj,352:$V21,353:$V31,356:$V41,359:$Vp,363:$V51,371:$V61,390:$V71,391:$V81,396:153,399:154,430:130,450:138,452:146,454:151,455:152,456:155},o([82,191,202,227,233,263,265,341,345],[2,284],{86:[1,413]}),o($V_1,[2,287]),o($V_1,[2,1057]),o($V_1,[2,1059],{205:414,207:415,215:$V$1,216:$V02,217:$V12,218:$V22,219:$V32,220:$V42,221:$V52,222:$V62}),o($V_1,[2,1060]),o($V72,$Vb1,{348:45,60:75,396:187,399:188,120:235,52:236,253:424,44:$Vd1,55:$VF,56:$VG,64:$Vf,114:$Vg,229:$Vh,349:$Vi,350:$Vj,359:$Vp}),o($V72,$Vb1,{348:45,60:75,396:187,399:188,120:235,52:236,253:425,44:$Vd1,55:$VF,56:$VG,64:$Vf,114:$Vg,229:$Vh,349:$Vi,350:$Vj,359:$Vp}),o($V82,[2,1071]),o($V82,[2,1073]),{97:[1,426],248:[1,429],270:[1,427],271:[1,428]},o($VS1,[2,1056]),o($V92,[2,907],{441:234,78:$Ve1,254:$Vj1,353:$Vk1,358:$Vm1,375:$Vo1,377:$Vp1,380:$Vr1,381:$Vs1}),o($V92,[2,908],{441:234,78:$Ve1,254:$Vj1,353:$Vk1,358:$Vm1,375:$Vo1,377:$Vp1,380:$Vr1,381:$Vs1}),o($V92,[2,909],{441:234,78:$Ve1,254:$Vj1,353:$Vk1,358:$Vm1,375:$Vo1,377:$Vp1,380:$Vr1,381:$Vs1}),o($V92,[2,910],{441:234,78:$Ve1,254:$Vj1,353:$Vk1,358:$Vm1,375:$Vo1,377:$Vp1,380:$Vr1,381:$Vs1}),{80:[1,430]},{55:$VF,56:$VG,60:75,64:$Vf,80:$VH,88:139,96:$VI,97:$VJ,108:$VK,113:$VL,114:$Vg,120:147,139:431,228:145,229:$Vh,268:$VN,270:$VO,271:$VP,272:$VQ,274:127,275:135,277:136,279:137,286:140,287:141,288:142,292:148,295:$VR,296:$VS,297:$VT,298:$VU,299:$VV,300:$VW,301:$VX,302:$VY,303:$VZ,304:$V_,305:$V$,306:126,307:$V01,308:$V11,309:117,310:125,312:128,348:45,349:$Vi,350:$Vj,352:$V21,353:$V31,356:$V41,359:$Vp,363:$V51,371:$V61,390:$V71,391:$V81,396:153,399:154,430:130,450:138,452:146,454:151,455:152,456:155},o($Vt1,[2,923]),o($VN1,$VO1,{348:45,60:75,309:117,310:125,306:126,274:127,312:128,430:130,275:135,277:136,279:137,450:138,88:139,286:140,287:141,288:142,228:145,452:146,120:147,292:148,454:151,455:152,396:153,399:154,456:155,467:310,180:432,439:433,139:434,55:$VF,56:$VG,64:$Vf,80:$VH,96:$VI,97:$VJ,108:$VK,113:$VL,114:$Vg,229:$Vh,268:$VN,270:$VO,271:$VP,272:$VQ,295:$VR,296:$VS,297:$VT,298:$VU,299:$VV,300:$VW,301:$VX,302:$VY,303:$VZ,304:$V_,305:$V$,307:$V01,308:$V11,349:$Vi,350:$Vj,352:$V21,353:$V31,356:$V41,359:$Vp,363:$V51,371:$V61,390:$V71,391:$V81}),{32:$Vc1,78:$Ve1,96:$Vf1,109:$Vg1,110:$Vh1,143:$Vi1,254:$Vj1,353:$Vk1,357:$Vl1,358:$Vm1,360:$Vn1,375:$Vo1,377:$Vp1,378:$Vq1,380:$Vr1,381:$Vs1,440:[1,435],441:234},o($Va2,[2,917],{441:234,32:$Vc1,78:$Ve1,96:$Vf1,109:$Vg1,110:$Vh1,143:$Vi1,254:$Vj1,353:$Vk1,358:$Vm1,360:$Vn1,375:$Vo1,377:$Vp1,380:$Vr1,381:$Vs1}),o($Va2,[2,918],{441:234,32:$Vc1,78:$Ve1,96:$Vf1,109:$Vg1,110:$Vh1,143:$Vi1,254:$Vj1,353:$Vk1,358:$Vm1,360:$Vn1,375:$Vo1,377:$Vp1,380:$Vr1,381:$Vs1}),o($VV1,[2,919],{441:234,78:$Ve1,375:$Vo1,377:$Vp1,380:$Vr1,381:$Vs1}),o($VV1,[2,920],{441:234,78:$Ve1,375:$Vo1,377:$Vp1,380:$Vr1,381:$Vs1}),o($VV1,[2,921],{441:234,78:$Ve1,375:$Vo1,377:$Vp1,380:$Vr1,381:$Vs1}),o($VT1,[2,1104]),o($VT1,[2,1105]),o($VV1,[2,1163],{441:234}),o($VV1,[2,1164],{441:234}),o($VV1,[2,1165],{441:234}),{82:[1,436]},{44:$Vd1,52:236,55:$VF,56:$VG,60:75,64:$Vf,82:$Vb1,114:$Vg,120:235,229:$Vh,253:437,348:45,349:$Vi,350:$Vj,359:$Vp,396:187,399:188},o($Vt1,[2,906]),o($Vt1,[2,925]),o($Vt1,[2,1172]),{55:$VF,56:$VG,60:75,64:$Vf,80:$VH,88:139,96:$VI,97:$VJ,108:$VK,113:$VL,114:$Vg,120:147,139:438,228:145,229:$Vh,268:$VN,270:$VO,271:$VP,272:$VQ,274:127,275:135,277:136,279:137,286:140,287:141,288:142,292:148,295:$VR,296:$VS,297:$VT,298:$VU,299:$VV,300:$VW,301:$VX,302:$VY,303:$VZ,304:$V_,305:$V$,306:126,307:$V01,308:$V11,309:117,310:125,312:128,348:45,349:$Vi,350:$Vj,352:$V21,353:$V31,356:$V41,359:$Vp,363:$V51,371:$V61,390:$V71,391:$V81,396:153,399:154,430:130,450:138,452:146,454:151,455:152,456:155},o($VW1,[2,1188]),{32:$Vc1,78:$Ve1,96:$Vf1,109:$Vg1,110:$Vh1,143:$Vi1,254:$Vj1,353:$Vk1,357:$Vl1,358:$Vm1,360:$Vn1,375:$Vo1,377:$Vp1,378:$Vq1,380:$Vr1,381:$Vs1,387:[1,439],441:234},o($Vt1,[2,565]),{82:[1,440],86:$Vb2},o($VD1,[2,570],{441:234,32:$Vc1,78:$Ve1,96:$Vf1,109:$Vg1,110:$Vh1,143:$Vi1,254:$Vj1,353:$Vk1,357:$Vl1,358:$Vm1,360:$Vn1,375:$Vo1,377:$Vp1,378:$Vq1,380:$Vr1,381:$Vs1}),o($Vx1,[2,1029]),o($Vz1,[2,867]),o($Vt1,[2,586]),o($Vt1,[2,587]),o($Vc2,[2,1116],{483:442,487:443,126:[1,444]}),{319:[2,529]},{82:[1,445],86:$Vb2},{32:$Vc1,44:[1,446],78:$Ve1,96:$Vf1,109:$Vg1,110:$Vh1,143:$Vi1,254:$Vj1,353:$Vk1,357:$Vl1,358:$Vm1,360:$Vn1,375:$Vo1,377:$Vp1,378:$Vq1,380:$Vr1,381:$Vs1,441:234},o($Vt1,[2,539]),{55:$VF,56:$VG,60:75,64:$Vf,80:$VH,82:[1,447],88:139,96:$VI,97:$VJ,108:$VK,113:$VL,114:$Vg,120:147,139:356,228:145,229:$Vh,268:$VN,270:$VO,271:$VP,272:$VQ,274:127,275:135,277:136,279:137,286:140,287:141,288:142,292:148,293:448,295:$VR,296:$VS,297:$VT,298:$VU,299:$VV,300:$VW,301:$VX,302:$VY,303:$VZ,304:$V_,305:$V$,306:126,307:$V01,308:$V11,309:117,310:125,312:128,348:45,349:$Vi,350:$Vj,352:$V21,353:$V31,356:$V41,359:$Vp,363:$V51,371:$V61,390:$V71,391:$V81,396:153,399:154,430:130,450:138,452:146,454:151,455:152,456:155},{82:[1,449]},o($VA1,[2,519]),{55:$VF,56:$VG,60:75,64:$Vf,80:$VH,88:139,96:$VI,97:$VJ,108:$VK,113:$VL,114:$Vg,120:147,139:356,228:145,229:$Vh,268:$VN,270:$VO,271:$VP,272:$VQ,274:127,275:135,277:136,279:137,286:140,287:141,288:142,292:148,293:450,295:$VR,296:$VS,297:$VT,298:$VU,299:$VV,300:$VW,301:$VX,302:$VY,303:$VZ,304:$V_,305:$V$,306:126,307:$V01,308:$V11,309:117,310:125,312:128,348:45,349:$Vi,350:$Vj,352:$V21,353:$V31,356:$V41,359:$Vp,363:$V51,371:$V61,390:$V71,391:$V81,396:153,399:154,430:130,450:138,452:146,454:151,455:152,456:155},{55:$VF,56:$VG,60:75,64:$Vf,80:$VH,88:139,96:$VI,97:$VJ,108:$VK,113:$VL,114:$Vg,120:147,139:451,228:145,229:$Vh,268:$VN,270:$VO,271:$VP,272:$VQ,274:127,275:135,277:136,279:137,286:140,287:141,288:142,292:148,295:$VR,296:$VS,297:$VT,298:$VU,299:$VV,300:$VW,301:$VX,302:$VY,303:$VZ,304:$V_,305:$V$,306:126,307:$V01,308:$V11,309:117,310:125,312:128,348:45,349:$Vi,350:$Vj,352:$V21,353:$V31,356:$V41,359:$Vp,363:$V51,371:$V61,390:$V71,391:$V81,396:153,399:154,430:130,450:138,452:146,454:151,455:152,456:155},o($VA1,[2,525]),o($Vt1,[2,1043]),{390:[1,452]},o($Vt1,[2,1046]),o($VY1,[2,764]),o($VY1,[2,767]),o($VB1,[2,830]),{80:$Vd2,166:453,167:454},o($VD1,[2,842]),o($VD1,[2,847],{441:234,32:$Vc1,78:$Ve1,96:$Vf1,109:$Vg1,110:$Vh1,143:$Vi1,254:$Vj1,353:$Vk1,357:$Vl1,358:$Vm1,360:$Vn1,375:$Vo1,377:$Vp1,378:$Vq1,380:$Vr1,381:$Vs1}),o([44,51,82,86,96,97,110,341,345],[2,49]),o($V2,[2,69]),o($VN1,[2,203],{144:456}),{128:457,130:[1,458]},o($VH1,[2,79]),{82:[1,459],86:[1,460]},o($VD1,[2,85]),{89:461,98:462,99:463,100:464,101:465,102:466,103:467,104:468,108:$Ve2,113:$Vf2,114:$Vg2,361:$Vh2,362:$Vi2,364:$Vj2,367:$Vk2,368:$Vl2,372:$Vm2,376:$Vn2,385:$Vo2,386:$Vp2,388:$Vq2,389:$Vr2,392:$Vs2},o($VI1,[2,835]),{44:[1,484]},{82:[1,485],86:[1,486]},o($VD1,$VE1,{50:286,49:487,51:$VF1}),o($V2,[2,589]),o($VL1,[2,604]),o($VK1,[2,617]),o($VL1,[2,609]),o($VL1,[2,614],{441:234,32:$Vc1,78:$Ve1,96:$Vf1,109:$Vg1,110:$Vh1,143:$Vi1,254:$Vj1,353:$Vk1,357:$Vl1,358:$Vm1,360:$Vn1,375:$Vo1,377:$Vp1,378:$Vq1,380:$Vr1,381:$Vs1}),o($VM1,[2,864]),o($VE,[2,280]),{82:[2,1085]},{82:[2,1087]},{82:[2,1089]},{82:[2,1091]},{82:[2,1093]},{82:[2,1095]},{82:[2,1097]},{82:[2,1099]},o($Vt2,[2,323],{200:488,201:489,202:[1,490]}),o($VZ1,[2,295]),{127:[1,491]},o($VP1,[2,467]),o($VP1,[2,470],{441:234,32:$Vc1,78:$Ve1,96:$Vf1,109:$Vg1,110:$Vh1,143:$Vi1,254:$Vj1,353:$Vk1,357:$Vl1,358:$Vm1,360:$Vn1,375:$Vo1,377:$Vp1,378:$Vq1,380:$Vr1,381:$Vs1}),{41:323,60:75,64:$Vf,80:$Vu1,114:$Vg,120:172,187:492,208:319,229:$Vh,348:45,349:$Vi,350:$Vj,359:$Vp,438:324,457:318,459:320,461:321,462:322},o($V_1,[2,1063],{207:493,215:$V$1,216:$V02,217:$V12,218:$V22,219:$V32,220:$V42,221:$V52,222:$V62}),{41:323,60:75,64:$Vf,80:$Vu1,114:$Vg,120:172,208:494,229:$Vh,348:45,349:$Vi,350:$Vj,359:$Vp,438:324,461:321,462:322},{216:[1,495]},{216:[1,496],218:[1,497]},{216:[1,498]},o($Vu2,[2,348]),{216:[1,500],218:[1,501],219:[1,499],221:[1,502]},{216:[1,503]},{216:[1,505],218:[1,506],219:[1,504],221:[1,507]},{216:[1,508]},o($V72,[2,1066]),o($V72,[2,1067]),o($Vt1,[2,901]),o($Vt1,[2,902]),o($Vt1,[2,903]),{183:[1,509]},o($VN1,$VO1,{348:45,60:75,309:117,310:125,306:126,274:127,312:128,430:130,275:135,277:136,279:137,450:138,88:139,286:140,287:141,288:142,228:145,452:146,120:147,292:148,454:151,455:152,396:153,399:154,456:155,467:310,139:434,180:510,439:511,55:$VF,56:$VG,64:$Vf,80:$VH,96:$VI,97:$VJ,108:$VK,113:$VL,114:$Vg,229:$Vh,268:$VN,270:$VO,271:$VP,272:$VQ,295:$VR,296:$VS,297:$VT,298:$VU,299:$VV,300:$VW,301:$VX,302:$VY,303:$VZ,304:$V_,305:$V$,307:$V01,308:$V11,349:$Vi,350:$Vj,352:$V21,353:$V31,356:$V41,359:$Vp,363:$V51,371:$V61,390:$V71,391:$V81}),{32:$Vc1,78:$Ve1,96:$Vf1,109:$Vg1,110:$Vh1,143:$Vi1,254:$Vj1,353:$Vk1,357:$Vl1,358:$Vm1,360:$Vn1,375:$Vo1,377:$Vp1,378:$Vq1,380:$Vr1,381:$Vs1,440:[1,512],441:234},{82:[1,513]},{82:[1,514],86:$Vv2},o($Vw2,[2,1013],{441:234,32:$Vc1,78:$Ve1,96:$Vf1,109:$Vg1,110:$Vh1,143:$Vi1,254:$Vj1,353:$Vk1,357:$Vl1,358:$Vm1,360:$Vn1,375:$Vo1,377:$Vp1,378:$Vq1,380:$Vr1,381:$Vs1}),{55:$VF,56:$VG,60:75,64:$Vf,80:$VH,88:139,96:$VI,97:$VJ,108:$VK,113:$VL,114:$Vg,120:147,139:516,228:145,229:$Vh,268:$VN,270:$VO,271:$VP,272:$VQ,274:127,275:135,277:136,279:137,286:140,287:141,288:142,292:148,295:$VR,296:$VS,297:$VT,298:$VU,299:$VV,300:$VW,301:$VX,302:$VY,303:$VZ,304:$V_,305:$V$,306:126,307:$V01,308:$V11,309:117,310:125,312:128,348:45,349:$Vi,350:$Vj,352:$V21,353:$V31,356:$V41,359:$Vp,363:$V51,371:$V61,390:$V71,391:$V81,396:153,399:154,430:130,450:138,452:146,454:151,455:152,456:155},o($Vx2,[2,1081]),{82:[1,517]},{32:$Vc1,78:$Ve1,96:$Vf1,109:$Vg1,110:$Vh1,143:$Vi1,254:$Vj1,353:$Vk1,357:$Vl1,358:$Vm1,360:$Vn1,370:[1,518],375:$Vo1,377:$Vp1,378:$Vq1,380:$Vr1,381:$Vs1,441:234},{55:$VF,56:$VG,60:75,64:$Vf,80:$VH,88:139,96:$VI,97:$VJ,108:$VK,113:$VL,114:$Vg,120:147,139:519,228:145,229:$Vh,268:$VN,270:$VO,271:$VP,272:$VQ,274:127,275:135,277:136,279:137,286:140,287:141,288:142,292:148,295:$VR,296:$VS,297:$VT,298:$VU,299:$VV,300:$VW,301:$VX,302:$VY,303:$VZ,304:$V_,305:$V$,306:126,307:$V01,308:$V11,309:117,310:125,312:128,348:45,349:$Vi,350:$Vj,352:$V21,353:$V31,356:$V41,359:$Vp,363:$V51,371:$V61,390:$V71,391:$V81,396:153,399:154,430:130,450:138,452:146,454:151,455:152,456:155},o($Vt1,[2,566]),{55:$VF,56:$VG,60:75,64:$Vf,80:$VH,88:139,96:$VI,97:$VJ,108:$VK,113:$VL,114:$Vg,120:147,139:520,228:145,229:$Vh,268:$VN,270:$VO,271:$VP,272:$VQ,274:127,275:135,277:136,279:137,286:140,287:141,288:142,292:148,295:$VR,296:$VS,297:$VT,298:$VU,299:$VV,300:$VW,301:$VX,302:$VY,303:$VZ,304:$V_,305:$V$,306:126,307:$V01,308:$V11,309:117,310:125,312:128,348:45,349:$Vi,350:$Vj,352:$V21,353:$V31,356:$V41,359:$Vp,363:$V51,371:$V61,390:$V71,391:$V81,396:153,399:154,430:130,450:138,452:146,454:151,455:152,456:155},{82:[2,1122],232:522,233:$Vy2,484:521},o($Vc2,[2,1117]),{127:[1,524]},{319:[2,530]},{98:525,361:$Vh2,362:$Vi2,364:$Vj2,367:$Vk2,368:$Vl2,372:$Vm2,376:$Vn2,385:$Vo2,386:$Vp2,388:$Vq2,389:$Vr2,392:$Vs2},o($VA1,[2,505]),{82:[1,526],86:$Vb2},o($VA1,[2,518]),{82:[1,527],86:$Vb2},{32:$Vc1,78:$Ve1,82:[1,528],96:$Vf1,109:$Vg1,110:$Vh1,143:$Vi1,254:$Vj1,353:$Vk1,357:$Vl1,358:$Vm1,360:$Vn1,375:$Vo1,377:$Vp1,378:$Vq1,380:$Vr1,381:$Vs1,441:234},o($Vt1,[2,1047]),o($V2,[2,250],{86:[1,529]}),o($Vz2,[2,256]),{55:$VF,56:$VG,60:75,64:$Vf,88:139,97:$VJ,108:$VK,113:$VL,114:$Vg,120:147,168:530,228:145,229:$Vh,268:$VN,270:$VO,271:$VP,272:$VQ,274:127,275:135,277:136,279:137,286:140,287:141,288:142,292:148,295:$VR,296:$VS,297:$VT,298:$VU,299:$VV,300:$VW,301:$VX,302:$VY,303:$VZ,304:$V_,305:$V$,306:126,307:$V01,308:$V11,309:531,310:125,312:128,348:45,349:$Vi,350:$Vj,359:$Vp,390:$V71,391:$V81,396:153,399:154,430:130,450:138,452:146,454:151,455:152,456:155},{45:532,169:24,170:25,175:$Va,242:$Vb},o($VG1,[2,163]),{80:[1,534],131:533},o($VH1,[2,83]),{60:75,64:$Vf,85:535,88:388,114:$Vg,120:147,229:$Vh,348:45,349:$Vi,350:$Vj,359:$Vp},o($VD1,[2,99],{90:536,93:537,94:538,50:541,51:$VF1,96:$VA2,97:$VB2}),o($VC2,[2,111]),o($VC2,[2,112]),o($VC2,[2,113]),o($VC2,[2,114]),o($VC2,[2,115]),o($VC2,[2,116]),o($VC2,[2,117]),o($VC2,[2,879]),o($VC2,[2,880]),o($VC2,$VD2,{435:542,80:$VE2}),o($VC2,[2,893],{436:544,80:[1,545]}),o($VC2,[2,883]),o($VC2,[2,884]),o($VC2,[2,885]),o($VC2,[2,886]),o($VC2,[2,887]),o($VC2,[2,888]),o($VC2,[2,889]),o($VC2,$VD2,{435:546,80:$VE2}),{109:[1,547]},{109:[1,548]},{109:[1,549]},{45:550,169:24,170:25,175:$Va,242:$Vb},o($VJ1,[2,215]),{60:75,64:$Vf,88:139,114:$Vg,120:147,150:551,229:$Vh,348:45,349:$Vi,350:$Vj,359:$Vp,430:211},o($VD1,[2,217]),o($VF2,[2,386],{231:552,232:553,233:$Vy2}),o($Vt2,[2,324]),{55:$VF,56:$VG,60:75,64:$Vf,80:$VH,88:139,96:$VI,97:$VJ,108:$VK,113:$VL,114:$Vg,120:147,139:554,228:145,229:$Vh,268:$VN,270:$VO,271:$VP,272:$VQ,274:127,275:135,277:136,279:137,286:140,287:141,288:142,292:148,295:$VR,296:$VS,297:$VT,298:$VU,299:$VV,300:$VW,301:$VX,302:$VY,303:$VZ,304:$V_,305:$V$,306:126,307:$V01,308:$V11,309:117,310:125,312:128,348:45,349:$Vi,350:$Vj,352:$V21,353:$V31,356:$V41,359:$Vp,363:$V51,371:$V61,390:$V71,391:$V81,396:153,399:154,430:130,450:138,452:146,454:151,455:152,456:155},{55:$VF,56:$VG,60:75,64:$Vf,80:$VH,88:139,96:$VI,97:$VJ,108:$VK,113:$VL,114:$Vg,120:147,139:556,192:555,228:145,229:$Vh,268:$VN,270:$VO,271:$VP,272:$VQ,274:127,275:135,277:136,279:137,286:140,287:141,288:142,292:148,295:$VR,296:$VS,297:$VT,298:$VU,299:$VV,300:$VW,301:$VX,302:$VY,303:$VZ,304:$V_,305:$V$,306:126,307:$V01,308:$V11,309:117,310:125,312:128,348:45,349:$Vi,350:$Vj,352:$V21,353:$V31,356:$V41,359:$Vp,363:$V51,371:$V61,390:$V71,391:$V81,396:153,399:154,430:130,450:138,452:146,454:151,455:152,456:155},o($V_1,[2,288]),{41:323,60:75,64:$Vf,80:$Vu1,114:$Vg,120:172,208:557,229:$Vh,348:45,349:$Vi,350:$Vj,359:$Vp,438:324,461:321,462:322},o($VG2,$VH2,{209:558,223:$VI2}),o($Vu2,[2,344]),o($Vu2,[2,345]),{216:[1,560]},o($Vu2,[2,347]),{216:[1,561]},o($Vu2,[2,350]),{216:[1,562]},{216:[1,563]},o($Vu2,[2,353]),{216:[1,564]},o($Vu2,[2,355]),{216:[1,565]},{216:[1,566]},o($Vu2,[2,358]),{55:$VF,56:$VG,60:75,64:$Vf,80:$VH,88:139,96:$VI,97:$VJ,108:$VK,113:$VL,114:$Vg,120:147,139:567,228:145,229:$Vh,268:$VN,270:$VO,271:$VP,272:$VQ,274:127,275:135,277:136,279:137,286:140,287:141,288:142,292:148,295:$VR,296:$VS,297:$VT,298:$VU,299:$VV,300:$VW,301:$VX,302:$VY,303:$VZ,304:$V_,305:$V$,306:126,307:$V01,308:$V11,309:117,310:125,312:128,348:45,349:$Vi,350:$Vj,352:$V21,353:$V31,356:$V41,359:$Vp,363:$V51,371:$V61,390:$V71,391:$V81,396:153,399:154,430:130,450:138,452:146,454:151,455:152,456:155},{82:[1,568]},{82:[1,569],86:$Vv2},{55:$VF,56:$VG,60:75,64:$Vf,80:$VH,88:139,96:$VI,97:$VJ,108:$VK,113:$VL,114:$Vg,120:147,139:570,228:145,229:$Vh,268:$VN,270:$VO,271:$VP,272:$VQ,274:127,275:135,277:136,279:137,286:140,287:141,288:142,292:148,295:$VR,296:$VS,297:$VT,298:$VU,299:$VV,300:$VW,301:$VX,302:$VY,303:$VZ,304:$V_,305:$V$,306:126,307:$V01,308:$V11,309:117,310:125,312:128,348:45,349:$Vi,350:$Vj,352:$V21,353:$V31,356:$V41,359:$Vp,363:$V51,371:$V61,390:$V71,391:$V81,396:153,399:154,430:130,450:138,452:146,454:151,455:152,456:155},o($Vt1,[2,913]),o($Vt1,[2,914]),{55:$VF,56:$VG,60:75,64:$Vf,80:$VH,88:139,96:$VI,97:$VJ,108:$VK,113:$VL,114:$Vg,120:147,139:571,228:145,229:$Vh,268:$VN,270:$VO,271:$VP,272:$VQ,274:127,275:135,277:136,279:137,286:140,287:141,288:142,292:148,295:$VR,296:$VS,297:$VT,298:$VU,299:$VV,300:$VW,301:$VX,302:$VY,303:$VZ,304:$V_,305:$V$,306:126,307:$V01,308:$V11,309:117,310:125,312:128,348:45,349:$Vi,350:$Vj,352:$V21,353:$V31,356:$V41,359:$Vp,363:$V51,371:$V61,390:$V71,391:$V81,396:153,399:154,430:130,450:138,452:146,454:151,455:152,456:155},o([44,55,56,64,82,86,114,130,183,191,202,215,216,217,218,219,220,221,222,227,229,233,240,241,263,265,341,345,349,350,357,359,360,369,370,378,383,387,393,440],[2,916],{441:234,32:$Vc1,78:$Ve1,96:$Vf1,109:$Vg1,110:$Vh1,143:$Vi1,254:$Vj1,353:$Vk1,358:$Vm1,375:$Vo1,377:$Vp1,380:$Vr1,381:$Vs1}),o($Vx2,[2,1082]),o($Vt1,[2,1173]),o($VW1,[2,1194],{441:234,32:$Vc1,78:$Ve1,96:$Vf1,109:$Vg1,110:$Vh1,143:$Vi1,254:$Vj1,353:$Vk1,357:$Vl1,358:$Vm1,360:$Vn1,375:$Vo1,377:$Vp1,378:$Vq1,380:$Vr1,381:$Vs1}),o($VD1,[2,571],{441:234,32:$Vc1,78:$Ve1,96:$Vf1,109:$Vg1,110:$Vh1,143:$Vi1,254:$Vj1,353:$Vk1,357:$Vl1,358:$Vm1,360:$Vn1,375:$Vo1,377:$Vp1,378:$Vq1,380:$Vr1,381:$Vs1}),{82:[1,572]},{82:[2,1127],130:[1,577],383:[1,576],488:573,490:574,491:575},{127:[1,578]},{55:$VF,56:$VG,60:75,64:$Vf,80:$VH,88:139,96:$VI,97:$VJ,108:$VK,113:$VL,114:$Vg,120:147,139:434,228:145,229:$Vh,268:$VN,270:$VO,271:$VP,272:$VQ,274:127,275:135,277:136,279:137,286:140,287:141,288:142,292:148,295:$VR,296:$VS,297:$VT,298:$VU,299:$VV,300:$VW,301:$VX,302:$VY,303:$VZ,304:$V_,305:$V$,306:126,307:$V01,308:$V11,309:117,310:125,312:128,348:45,349:$Vi,350:$Vj,352:$V21,353:$V31,356:$V41,359:$Vp,363:$V51,371:$V61,390:$V71,391:$V81,396:153,399:154,430:130,439:579,450:138,452:146,454:151,455:152,456:155},{82:[1,580]},o($VA1,[2,506]),o($VA1,[2,520]),o($VA1,[2,524]),{80:$Vd2,167:581},{82:[1,582],86:[1,583]},o($VD1,[2,1026]),o($V2,[2,200]),{80:[1,585],132:584},{60:75,64:$Vf,88:587,114:$Vg,120:147,229:$Vh,348:45,349:$Vi,350:$Vj,359:$Vp,422:586},o($VD1,[2,86]),o($VD1,[2,95]),o($VD1,[2,100],{50:541,94:588,51:$VF1,96:$VA2,97:$VB2}),o($VJ2,[2,101]),{97:[1,589]},o($VJ2,[2,108]),o($VJ2,[2,109]),o($VC2,[2,881]),{390:[1,590]},o($VC2,[2,882]),{390:[1,591]},o($VC2,[2,890]),{89:592,98:462,99:463,100:464,101:465,102:466,103:467,104:468,108:$Ve2,110:[1,593],113:$Vf2,114:$Vg2,361:$Vh2,362:$Vi2,364:$Vj2,367:$Vk2,368:$Vl2,372:$Vm2,376:$Vn2,385:$Vo2,386:$Vp2,388:$Vq2,389:$Vr2,392:$Vs2},{98:594,110:[1,595],361:$Vh2,362:$Vi2,364:$Vj2,367:$Vk2,368:$Vl2,372:$Vm2,376:$Vn2,385:$Vo2,386:$Vp2,388:$Vq2,389:$Vr2,392:$Vs2},{60:75,64:$Vf,110:[1,597],114:$Vg,115:596,117:598,120:599,229:$Vh,348:45,349:$Vi,350:$Vj,359:$Vp},o($V2,[2,204]),o($VD1,$VE1,{50:286,49:600,51:$VF1}),o($Vv,[2,379],{225:601,226:602,227:[1,603]}),o($VF2,[2,387]),o($Vt2,[2,325],{441:234,32:$Vc1,78:$Ve1,96:$Vf1,109:$Vg1,110:$Vh1,143:$Vi1,254:$Vj1,353:$Vk1,357:$Vl1,358:$Vm1,360:$Vn1,375:$Vo1,377:$Vp1,378:$Vq1,380:$Vr1,381:$Vs1}),o($VZ1,[2,296],{86:[1,604]}),o($VK2,[2,311],{441:234,32:$Vc1,78:$Ve1,96:$Vf1,109:$Vg1,110:$Vh1,143:$Vi1,254:$Vj1,353:$Vk1,357:$Vl1,358:$Vm1,360:$Vn1,375:$Vo1,377:$Vp1,378:$Vq1,380:$Vr1,381:$Vs1}),o($VG2,$VH2,{209:605,223:$VI2}),o($VG2,[2,331]),{55:$VF,56:$VG,60:75,64:$Vf,80:$VH,88:139,96:$VI,97:$VJ,108:$VK,113:$VL,114:$Vg,120:147,139:606,228:145,229:$Vh,268:$VN,270:$VO,271:$VP,272:$VQ,274:127,275:135,277:136,279:137,286:140,287:141,288:142,292:148,295:$VR,296:$VS,297:$VT,298:$VU,299:$VV,300:$VW,301:$VX,302:$VY,303:$VZ,304:$V_,305:$V$,306:126,307:$V01,308:$V11,309:117,310:125,312:128,348:45,349:$Vi,350:$Vj,352:$V21,353:$V31,356:$V41,359:$Vp,363:$V51,371:$V61,390:$V71,391:$V81,396:153,399:154,430:130,450:138,452:146,454:151,455:152,456:155},o($Vu2,[2,346]),o($Vu2,[2,349]),o($Vu2,[2,351]),o($Vu2,[2,352]),o($Vu2,[2,354]),o($Vu2,[2,356]),o($Vu2,[2,357]),o($VV1,[2,904],{441:234}),o($Vt1,[2,911]),o($Vt1,[2,912]),o($VU1,[2,915],{441:234,32:$Vc1,78:$Ve1,109:$Vg1,110:$Vh1,143:$Vi1,254:$Vj1,353:$Vk1,358:$Vm1,375:$Vo1,377:$Vp1,380:$Vr1,381:$Vs1}),o($Vw2,[2,1014],{441:234,32:$Vc1,78:$Ve1,96:$Vf1,109:$Vg1,110:$Vh1,143:$Vi1,254:$Vj1,353:$Vk1,357:$Vl1,358:$Vm1,360:$Vn1,375:$Vo1,377:$Vp1,378:$Vq1,380:$Vr1,381:$Vs1}),o($Vt1,[2,1111]),{82:[2,1123]},{82:[2,1128]},{360:[1,607],495:[1,608]},o($VL2,[2,1145]),o($VL2,[2,1146]),{55:$VF,56:$VG,60:75,64:$Vf,80:$VH,88:139,96:$VI,97:$VJ,108:$VK,113:$VL,114:$Vg,120:147,139:611,228:145,229:$Vh,234:609,237:610,268:$VN,270:$VO,271:$VP,272:$VQ,274:127,275:135,277:136,279:137,286:140,287:141,288:142,292:148,295:$VR,296:$VS,297:$VT,298:$VU,299:$VV,300:$VW,301:$VX,302:$VY,303:$VZ,304:$V_,305:$V$,306:126,307:$V01,308:$V11,309:117,310:125,312:128,348:45,349:$Vi,350:$Vj,352:$V21,353:$V31,356:$V41,359:$Vp,363:$V51,371:$V61,390:$V71,391:$V81,396:153,399:154,430:130,450:138,452:146,454:151,455:152,456:155},o($Vc2,[2,1118],{86:$Vv2}),o($Vt1,[2,538]),o($Vz2,[2,257]),o($Vz2,[2,258]),{55:$VF,56:$VG,60:75,64:$Vf,88:139,97:$VJ,108:$VK,113:$VL,114:$Vg,120:147,228:145,229:$Vh,268:$VN,270:$VO,271:$VP,272:$VQ,274:127,275:135,277:136,279:137,286:140,287:141,288:142,292:148,295:$VR,296:$VS,297:$VT,298:$VU,299:$VV,300:$VW,301:$VX,302:$VY,303:$VZ,304:$V_,305:$V$,306:126,307:$V01,308:$V11,309:612,310:125,312:128,348:45,349:$Vi,350:$Vj,359:$Vp,390:$V71,391:$V81,396:153,399:154,430:130,450:138,452:146,454:151,455:152,456:155},o($VG1,[2,167]),{126:$VM2,135:613,137:614},{82:[1,616],86:[1,617]},o($VD1,[2,822]),o($VJ2,[2,102]),o($VJ2,[2,107]),{82:[1,618]},{82:[1,619],86:[1,620]},{110:[1,621]},o($VC2,[2,122]),{86:[1,622]},o($VC2,[2,126]),{86:[1,624],110:[1,623]},o($VC2,[2,132]),o($VN2,[2,134]),{121:[1,625]},o($VD1,[2,218]),o($Vv,[2,441]),o($Vv,[2,380]),{228:626,229:[1,627],268:$VN,390:$V71,391:$V81,454:151,455:152},{55:$VF,56:$VG,60:75,64:$Vf,80:$VH,88:139,96:$VI,97:$VJ,108:$VK,113:$VL,114:$Vg,120:147,139:628,228:145,229:$Vh,268:$VN,270:$VO,271:$VP,272:$VQ,274:127,275:135,277:136,279:137,286:140,287:141,288:142,292:148,295:$VR,296:$VS,297:$VT,298:$VU,299:$VV,300:$VW,301:$VX,302:$VY,303:$VZ,304:$V_,305:$V$,306:126,307:$V01,308:$V11,309:117,310:125,312:128,348:45,349:$Vi,350:$Vj,352:$V21,353:$V31,356:$V41,359:$Vp,363:$V51,371:$V61,390:$V71,391:$V81,396:153,399:154,430:130,450:138,452:146,454:151,455:152,456:155},o($VG2,[2,332]),o($VG2,[2,374],{441:234,32:$Vc1,78:$Ve1,96:$Vf1,109:$Vg1,110:$Vh1,143:$Vi1,254:$Vj1,353:$Vk1,357:$Vl1,358:$Vm1,360:$Vn1,375:$Vo1,377:$Vp1,378:$Vq1,380:$Vr1,381:$Vs1}),o($VO2,$VP2,{492:629}),o($VO2,$VP2,{492:630}),o([82,130,227,263,341,345,383],[2,388],{86:[1,631]}),o($VQ2,[2,391]),o($VQ2,[2,401],{441:234,239:632,32:$Vc1,78:$Ve1,96:$Vf1,109:$Vg1,110:$Vh1,143:$Vi1,240:[1,633],241:[1,634],254:$Vj1,353:$Vk1,357:$Vl1,358:$Vm1,360:$Vn1,375:$Vo1,377:$Vp1,378:$Vq1,380:$Vr1,381:$Vs1}),o($VD1,[2,1027]),{82:[1,635],86:[1,636]},o($VD1,[2,176]),{55:$VF,56:$VG,60:75,64:$Vf,80:$VH,88:139,96:$VI,97:$VJ,108:$VK,113:$VL,114:$Vg,120:147,139:637,141:[1,638],228:145,229:$Vh,268:$VN,270:$VO,271:$VP,272:$VQ,274:127,275:135,277:136,279:137,286:140,287:141,288:142,292:148,295:$VR,296:$VS,297:$VT,298:$VU,299:$VV,300:$VW,301:$VX,302:$VY,303:$VZ,304:$V_,305:$V$,306:126,307:$V01,308:$V11,309:117,310:125,312:128,348:45,349:$Vi,350:$Vj,352:$V21,353:$V31,356:$V41,359:$Vp,363:$V51,371:$V61,390:$V71,391:$V81,396:153,399:154,430:130,450:138,452:146,454:151,455:152,456:155},{80:[2,819]},{60:75,64:$Vf,88:639,114:$Vg,120:147,229:$Vh,348:45,349:$Vi,350:$Vj,359:$Vp},o($VC2,[2,892]),o($VC2,[2,894]),{390:[1,640]},o($VC2,[2,121]),{89:641,98:462,99:463,100:464,101:465,102:466,103:467,104:468,108:$Ve2,113:$Vf2,114:$Vg2,361:$Vh2,362:$Vi2,364:$Vj2,367:$Vk2,368:$Vl2,372:$Vm2,376:$Vn2,385:$Vo2,386:$Vp2,388:$Vq2,389:$Vr2,392:$Vs2},o($VC2,[2,131]),{60:75,64:$Vf,114:$Vg,117:642,120:599,229:$Vh,348:45,349:$Vi,350:$Vj,359:$Vp},{89:643,98:462,99:463,100:464,101:465,102:466,103:467,104:468,108:$Ve2,113:$Vf2,114:$Vg2,361:$Vh2,362:$Vi2,364:$Vj2,367:$Vk2,368:$Vl2,372:$Vm2,376:$Vn2,385:$Vo2,386:$Vp2,388:$Vq2,389:$Vr2,392:$Vs2},o($Vv,[2,381],{86:[1,644]}),o($Vv,[2,383],{86:[1,645]}),o($VK2,[2,312],{441:234,32:$Vc1,78:$Ve1,96:$Vf1,109:$Vg1,110:$Vh1,143:$Vi1,254:$Vj1,353:$Vk1,357:$Vl1,358:$Vm1,360:$Vn1,375:$Vo1,377:$Vp1,378:$Vq1,380:$Vr1,381:$Vs1}),o($VR2,$VS2,{493:646,503:647,365:$VT2,390:$VU2,495:$VV2}),o($VR2,$VS2,{503:647,493:651,365:$VT2,390:$VU2,495:$VV2}),{55:$VF,56:$VG,60:75,64:$Vf,80:$VH,88:139,96:$VI,97:$VJ,108:$VK,113:$VL,114:$Vg,120:147,139:611,228:145,229:$Vh,237:652,268:$VN,270:$VO,271:$VP,272:$VQ,274:127,275:135,277:136,279:137,286:140,287:141,288:142,292:148,295:$VR,296:$VS,297:$VT,298:$VU,299:$VV,300:$VW,301:$VX,302:$VY,303:$VZ,304:$V_,305:$V$,306:126,307:$V01,308:$V11,309:117,310:125,312:128,348:45,349:$Vi,350:$Vj,352:$V21,353:$V31,356:$V41,359:$Vp,363:$V51,371:$V61,390:$V71,391:$V81,396:153,399:154,430:130,450:138,452:146,454:151,455:152,456:155},o($VQ2,[2,398]),o($VQ2,[2,402]),o($VQ2,[2,403]),o($VG1,[2,173]),{126:$VM2,137:653},{32:$Vc1,78:$Ve1,96:$Vf1,109:[1,655],110:$Vh1,140:654,143:[1,656],254:$Vj1,353:$Vk1,357:$Vl1,358:$Vm1,360:$Vn1,375:$Vo1,377:$Vp1,378:$Vq1,380:$Vr1,381:$Vs1,441:234},{109:$VW2,140:657,143:$VX2},o($VD1,[2,823]),{82:[1,660]},{110:[1,661]},o($VN2,[2,135]),o($VN2,$VE1,{50:286,49:662,51:$VF1}),{228:663,268:$VN,390:$V71,391:$V81,454:151,455:152},{229:[1,664]},{82:$VY2,357:$VZ2,494:665},{379:[1,667]},{382:[1,668]},o($V_2,[2,1158]),o($V_2,[2,1159]),{82:$VY2,357:$VZ2,494:669},o($VQ2,[2,392]),o($VD1,[2,177]),{141:[1,670]},{55:$VF,56:$VG,60:75,64:$Vf,80:$VH,88:139,96:$VI,97:$VJ,108:$VK,113:$VL,114:$Vg,120:147,139:328,141:$V$2,228:145,229:$Vh,268:$VN,270:$VO,271:$VP,272:$VQ,274:127,275:135,277:136,279:137,286:140,287:141,288:142,292:148,295:$VR,296:$VS,297:$VT,298:$VU,299:$VV,300:$VW,301:$VX,302:$VY,303:$VZ,304:$V_,305:$V$,306:126,307:$V01,308:$V11,309:117,310:125,312:128,348:45,349:$Vi,350:$Vj,352:$V21,353:$V31,356:$V41,359:$Vp,363:$V51,371:$V61,390:$V71,391:$V81,396:153,399:154,430:130,450:138,452:146,454:151,455:152,456:155},{55:$VF,56:$VG,60:75,64:$Vf,80:$VH,88:139,96:$VI,97:$VJ,108:$VK,113:$VL,114:$Vg,120:147,139:330,141:$V03,228:145,229:$Vh,268:$VN,270:$VO,271:$VP,272:$VQ,274:127,275:135,277:136,279:137,286:140,287:141,288:142,292:148,295:$VR,296:$VS,297:$VT,298:$VU,299:$VV,300:$VW,301:$VX,302:$VY,303:$VZ,304:$V_,305:$V$,306:126,307:$V01,308:$V11,309:117,310:125,312:128,348:45,349:$Vi,350:$Vj,352:$V21,353:$V31,356:$V41,359:$Vp,363:$V51,371:$V61,390:$V71,391:$V81,396:153,399:154,430:130,450:138,452:146,454:151,455:152,456:155},{55:$VF,56:$VG,60:75,64:$Vf,80:$VH,88:139,96:$VI,97:$VJ,108:$VK,113:$VL,114:$Vg,120:147,139:671,228:145,229:$Vh,268:$VN,270:$VO,271:$VP,272:$VQ,274:127,275:135,277:136,279:137,286:140,287:141,288:142,292:148,295:$VR,296:$VS,297:$VT,298:$VU,299:$VV,300:$VW,301:$VX,302:$VY,303:$VZ,304:$V_,305:$V$,306:126,307:$V01,308:$V11,309:117,310:125,312:128,348:45,349:$Vi,350:$Vj,352:$V21,353:$V31,356:$V41,359:$Vp,363:$V51,371:$V61,390:$V71,391:$V81,396:153,399:154,430:130,450:138,452:146,454:151,455:152,456:155},o($VX1,$V$2),o($VX1,$V03),o($VC2,[2,895]),o($VC2,[2,125]),o($VN2,[2,141]),o($Vv,[2,382]),o($Vv,[2,384]),{82:[2,1129]},{365:[1,672],390:$VU2,495:$VV2,503:673},o($VR2,[2,1148]),o($VR2,[2,1149]),{82:[2,1130]},o($VD1,[2,185],{140:674,109:$VW2,143:$VX2}),o($VD1,[2,184],{441:234,32:$Vc1,78:$Ve1,96:$Vf1,109:$Vg1,110:$Vh1,143:$Vi1,254:$Vj1,353:$Vk1,357:$Vl1,358:$Vm1,360:$Vn1,375:$Vo1,377:$Vp1,378:$Vq1,380:$Vr1,381:$Vs1}),{382:[1,675]},{373:[1,676]},{55:$VF,56:$VG,60:75,64:$Vf,80:$VH,88:139,96:$VI,97:$VJ,108:$VK,113:$VL,114:$Vg,120:147,139:677,228:145,229:$Vh,268:$VN,270:$VO,271:$VP,272:$VQ,274:127,275:135,277:136,279:137,286:140,287:141,288:142,292:148,295:$VR,296:$VS,297:$VT,298:$VU,299:$VV,300:$VW,301:$VX,302:$VY,303:$VZ,304:$V_,305:$V$,306:126,307:$V01,308:$V11,309:117,310:125,312:128,348:45,349:$Vi,350:$Vj,352:$V21,353:$V31,356:$V41,359:$Vp,363:$V51,371:$V61,390:$V71,391:$V81,396:153,399:154,430:130,450:138,452:146,454:151,455:152,456:155},{82:[2,1153]},{82:[2,1154]},o($VD1,[2,183],{441:234,32:$Vc1,78:$Ve1,96:$Vf1,109:$Vg1,110:$Vh1,143:$Vi1,254:$Vj1,353:$Vk1,357:$Vl1,358:$Vm1,360:$Vn1,375:$Vo1,377:$Vp1,378:$Vq1,380:$Vr1,381:$Vs1})],
defaultActions: {38:[2,622],71:[2,599],72:[2,601],107:[2,860],131:[2,534],132:[2,535],133:[2,536],134:[2,537],156:[2,510],157:[2,511],158:[2,512],159:[2,513],160:[2,514],161:[2,515],162:[2,516],163:[2,517],171:[2,35],173:[2,44],210:[2,613],362:[2,529],400:[2,1085],401:[2,1087],402:[2,1089],403:[2,1091],404:[2,1093],405:[2,1095],406:[2,1097],407:[2,1099],445:[2,530],573:[2,1123],574:[2,1128],616:[2,819],665:[2,1129],669:[2,1130],675:[2,1153],676:[2,1154]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: lexer.yylloc,
                    ruleId: stack.slice(stack.length - 2, stack.length).join('_'),
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};


SqlParseSupport.initSyntaxParser(parser);/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true,"flex":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0: /* skip whitespace */ 
break;
case 1: /* skip comments */ 
break;
case 2: /* skip comments */ 
break;
case 3: parser.yy.partialCursor = false; parser.yy.cursorFound = yy_.yylloc; return 5; 
break;
case 4: parser.yy.partialCursor = true; parser.yy.cursorFound = yy_.yylloc; return 394; 
break;
case 5: this.popState(); return 440; 
break;
case 6: return 30; 
break;
case 7: parser.determineCase(yy_.yytext); parser.addStatementTypeLocation('ALTER', yy_.yylloc, yy.lexer.upcomingInput()); return 4; 
break;
case 8: return 357; 
break;
case 9: return 44; 
break;
case 10: return 240; 
break;
case 11: this.begin('between'); return 360; 
break;
case 12: return 361; 
break;
case 13: return 362; 
break;
case 14: return 127; 
break;
case 15: return 406; 
break;
case 16: return 363; 
break;
case 17: return 364; 
break;
case 18: return 51; 
break;
case 19: parser.determineCase(yy_.yytext); return 8; 
break;
case 20: return 215; 
break;
case 21: return 365; 
break;
case 22: return 366; 
break;
case 23: return 367; 
break;
case 24: return 241; 
break;
case 25: return 248; 
break;
case 26: return 358; 
break;
case 27: return 368; 
break;
case 28: parser.determineCase(yy_.yytext); parser.addStatementTypeLocation('DROP', yy_.yylloc, yy.lexer.upcomingInput()); return 12; 
break;
case 29: return 369; 
break;
case 30: return 370; 
break;
case 31: parser.yy.correlatedSubQuery = true; return 371; 
break;
case 32: return 271; 
break;
case 33: return 372; 
break;
case 34: return 373; 
break;
case 35: parser.determineCase(yy_.yytext); return 183; 
break;
case 36: return 217; 
break;
case 37: return 191; 
break;
case 38: return 202; 
break;
case 39: return 307; 
break;
case 40: return 375; 
break;
case 41: return 219; 
break;
case 42: return 163; 
break;
case 43: return 376; 
break;
case 44: return 164; 
break;
case 45: return 377; 
break;
case 46: return 216; 
break;
case 47: return 220; 
break;
case 48: return 78; 
break;
case 49: return 227; 
break;
case 50: return 96; 
break;
case 51: return 97; 
break;
case 52: return 223; 
break;
case 53: return 349; 
break;
case 54: return 378; 
break;
case 55: return 233; 
break;
case 56: return 218; 
break;
case 57: return 126; 
break;
case 58: return 379; 
break;
case 59: return 155; 
break;
case 60: return 130; 
break;
case 61: return 380; 
break;
case 62: return 222; 
break;
case 63: return 381; 
break;
case 64: return 382; 
break;
case 65: return 64; 
break;
case 66: return 383; 
break;
case 67: return 384; 
break;
case 68: parser.determineCase(yy_.yytext); parser.addStatementTypeLocation('SELECT', yy_.yylloc); return 242; 
break;
case 69: return 221; 
break;
case 70: parser.determineCase(yy_.yytext); parser.addStatementTypeLocation('RESET', yy_.yylloc); return 34; 
break;
case 71: parser.determineCase(yy_.yytext); parser.addStatementTypeLocation('SET', yy_.yylloc); return 16; 
break;
case 72: parser.determineCase(yy_.yytext); parser.addStatementTypeLocation('SHOW', yy_.yylloc); return 'SHOW'; 
break;
case 73: return 385; 
break;
case 74: return 386; 
break;
case 75: return 40; 
break;
case 76: return 387; 
break;
case 77: return 388; 
break;
case 78: return 389; 
break;
case 79: return 'TO'; 
break;
case 80: return 270; 
break;
case 81: parser.determineCase(yy_.yytext); parser.addStatementTypeLocation('TRUNCATE', yy_.yylloc, yy.lexer.upcomingInput()); return 272; 
break;
case 82: return 495; 
break;
case 83: return 263; 
break;
case 84: parser.determineCase(yy_.yytext); return 322; 
break;
case 85: parser.determineCase(yy_.yytext); parser.addStatementTypeLocation('USE', yy_.yylloc); return 338; 
break;
case 86: return 141; 
break;
case 87: return 392; 
break;
case 88: return 48; 
break;
case 89: return 393; 
break;
case 90: return 265; 
break;
case 91: parser.determineCase(yy_.yytext); parser.addStatementTypeLocation('WITH', yy_.yylloc); return 175; 
break;
case 92: return 319; 
break;
case 93: return 64; 
break;
case 94: yy.lexer.unput('('); yy_.yytext = 'avg'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 295; 
break;
case 95: yy.lexer.unput('('); yy_.yytext = 'cast'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 308; 
break;
case 96: yy.lexer.unput('('); yy_.yytext = 'count'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 303; 
break;
case 97: yy.lexer.unput('('); yy_.yytext = 'max'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 296; 
break;
case 98: yy.lexer.unput('('); yy_.yytext = 'min'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 297; 
break;
case 99: yy.lexer.unput('('); yy_.yytext = 'stddev_pop'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 298; 
break;
case 100: yy.lexer.unput('('); yy_.yytext = 'stddev_samp'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 299; 
break;
case 101: yy.lexer.unput('('); yy_.yytext = 'sum'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 304; 
break;
case 102: yy.lexer.unput('('); yy_.yytext = 'var_pop'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 300; 
break;
case 103: yy.lexer.unput('('); yy_.yytext = 'var_samp'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 301; 
break;
case 104: yy.lexer.unput('('); yy_.yytext = 'variance'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 302; 
break;
case 105: yy.lexer.unput('('); yy_.yytext = 'cume_dist'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 305; 
break;
case 106: yy.lexer.unput('('); yy_.yytext = 'dense_rank'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 305; 
break;
case 107: yy.lexer.unput('('); yy_.yytext = 'first_value'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 305; 
break;
case 108: yy.lexer.unput('('); yy_.yytext = 'lag'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 305; 
break;
case 109: yy.lexer.unput('('); yy_.yytext = 'last_value'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 305; 
break;
case 110: yy.lexer.unput('('); yy_.yytext = 'lead'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 305; 
break;
case 111: yy.lexer.unput('('); yy_.yytext = 'rank'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 305; 
break;
case 112: yy.lexer.unput('('); yy_.yytext = 'row_number'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 305; 
break;
case 113: return 390; 
break;
case 114: return 390; 
break;
case 115: return 391; 
break;
case 116: return 350; 
break;
case 117: parser.yy.cursorFound = true; return 5; 
break;
case 118: parser.yy.cursorFound = true; return 394; 
break;
case 119: return 374; 
break;
case 120: parser.addFileLocation(yy_.yylloc, yy_.yytext); return 500; 
break;
case 121: this.popState(); return 501; 
break;
case 122: return 341; 
break;
case 123: return 357; 
break;
case 124: return 378; 
break;
case 125: return 32; 
break;
case 126: return 109; 
break;
case 127: return 110; 
break;
case 128: return 143; 
break;
case 129: return 143; 
break;
case 130: return 143; 
break;
case 131: return 143; 
break;
case 132: return 143; 
break;
case 133: return 353; 
break;
case 134: return 254; 
break;
case 135: return 358; 
break;
case 136: return 358; 
break;
case 137: return 358; 
break;
case 138: return 358; 
break;
case 139: return 358; 
break;
case 140: return 358; 
break;
case 141: return 86; 
break;
case 142: return 268; 
break;
case 143: return 121; 
break;
case 144: return 345; 
break;
case 145: return 356; 
break;
case 146: return 352; 
break;
case 147: return 80; 
break;
case 148: return 82; 
break;
case 149: return 354; 
break;
case 150: return 355; 
break;
case 151: return 229; 
break;
case 152: this.begin('backtickedValue'); return 359; 
break;
case 153:
                                             if (parser.handleQuotedValueWithCursor(this, yy_.yytext, yy_.yylloc, '`')) {
                                               return 398;
                                             }
                                             return 57;
                                           
break;
case 154: this.popState(); return 359; 
break;
case 155: this.begin('singleQuotedValue'); return 55; 
break;
case 156:
                                             if (parser.handleQuotedValueWithCursor(this, yy_.yytext, yy_.yylloc, '\'')) {
                                               return 398;
                                             }
                                             return 57;
                                           
break;
case 157: this.popState(); return 55; 
break;
case 158: this.begin('doubleQuotedValue'); return 56; 
break;
case 159:
                                             if (parser.handleQuotedValueWithCursor(this, yy_.yytext, yy_.yylloc, '"')) {
                                               return 398;
                                             }
                                             return 57;
                                           
break;
case 160: this.popState(); return 56; 
break;
case 161: return 341; 
break;
case 162: /* To prevent console logging of unknown chars */ 
break;
case 163: 
break;
case 164: 
break;
case 165: 
break;
case 166: 
break;
case 167: 
break;
case 168:console.log(yy_.yytext);
break;
}
},
rules: [/^(?:\s)/i,/^(?:--.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:\u2020)/i,/^(?:\u2021)/i,/^(?:AND)/i,/^(?:ALL)/i,/^(?:ALTER)/i,/^(?:AND)/i,/^(?:AS)/i,/^(?:ASC)/i,/^(?:BETWEEN)/i,/^(?:BIGINT)/i,/^(?:BOOLEAN)/i,/^(?:BY)/i,/^(?:CASCADE)/i,/^(?:CASE)/i,/^(?:CHAR)/i,/^(?:COMMENT)/i,/^(?:CREATE)/i,/^(?:CROSS)/i,/^(?:CURRENT)/i,/^(?:DATABASE)/i,/^(?:DECIMAL)/i,/^(?:DESC)/i,/^(?:DISTINCT)/i,/^(?:DIV)/i,/^(?:DOUBLE)/i,/^(?:DROP)/i,/^(?:ELSE)/i,/^(?:END)/i,/^(?:EXISTS)/i,/^(?:FALSE)/i,/^(?:FLOAT)/i,/^(?:FOLLOWING)/i,/^(?:FROM)/i,/^(?:FULL)/i,/^(?:GROUP)/i,/^(?:HAVING)/i,/^(?:IF)/i,/^(?:IN)/i,/^(?:INNER)/i,/^(?:INSERT)/i,/^(?:INT)/i,/^(?:INTO)/i,/^(?:IS)/i,/^(?:JOIN)/i,/^(?:LEFT)/i,/^(?:LIKE)/i,/^(?:LIMIT)/i,/^(?:NOT)/i,/^(?:NULL)/i,/^(?:ON)/i,/^(?:OPTION)/i,/^(?:OR)/i,/^(?:ORDER)/i,/^(?:OUTER)/i,/^(?:PARTITION)/i,/^(?:PRECEDING)/i,/^(?:PURGE)/i,/^(?:RANGE)/i,/^(?:REGEXP)/i,/^(?:RIGHT)/i,/^(?:RLIKE)/i,/^(?:ROW)/i,/^(?:ROLE)/i,/^(?:ROWS)/i,/^(?:SCHEMA)/i,/^(?:SELECT)/i,/^(?:SEMI)/i,/^(?:RESET)/i,/^(?:SET)/i,/^(?:SHOW)/i,/^(?:SMALLINT)/i,/^(?:STRING)/i,/^(?:TABLE)/i,/^(?:THEN)/i,/^(?:TIMESTAMP)/i,/^(?:TINYINT)/i,/^(?:TO)/i,/^(?:TRUE)/i,/^(?:TRUNCATE)/i,/^(?:UNBOUNDED)/i,/^(?:UNION)/i,/^(?:UPDATE)/i,/^(?:USE)/i,/^(?:VALUES)/i,/^(?:VARCHAR)/i,/^(?:VIEW)/i,/^(?:WHEN)/i,/^(?:WHERE)/i,/^(?:WITH)/i,/^(?:OVER)/i,/^(?:ROLE)/i,/^(?:AVG\s*\()/i,/^(?:CAST\s*\()/i,/^(?:COUNT\s*\()/i,/^(?:MAX\s*\()/i,/^(?:MIN\s*\()/i,/^(?:STDDEV_POP\s*\()/i,/^(?:STDDEV_SAMP\s*\()/i,/^(?:SUM\s*\()/i,/^(?:VAR_POP\s*\()/i,/^(?:VAR_SAMP\s*\()/i,/^(?:VARIANCE\s*\()/i,/^(?:CUME_DIST\s*\()/i,/^(?:DENSE_RANK\s*\()/i,/^(?:FIRST_VALUE\s*\()/i,/^(?:LAG\s*\()/i,/^(?:LAST_VALUE\s*\()/i,/^(?:LEAD\s*\()/i,/^(?:RANK\s*\()/i,/^(?:ROW_NUMBER\s*\()/i,/^(?:[0-9]+)/i,/^(?:[0-9]+(?:[YSL]|BD)?)/i,/^(?:[0-9]+E)/i,/^(?:[A-Za-z0-9_]+)/i,/^(?:\u2020)/i,/^(?:\u2021)/i,/^(?:\s+['"])/i,/^(?:[^'"\u2020\u2021]+)/i,/^(?:['"])/i,/^(?:$)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:!=)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:<>)/i,/^(?:<=>)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\+)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:\|)/i,/^(?:\^)/i,/^(?:&)/i,/^(?:,)/i,/^(?:\.)/i,/^(?::)/i,/^(?:;)/i,/^(?:~)/i,/^(?:!)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\$\{[^}]*\})/i,/^(?:`)/i,/^(?:[^`]+)/i,/^(?:`)/i,/^(?:')/i,/^(?:(?:\\\\|\\[']|[^'])+)/i,/^(?:')/i,/^(?:")/i,/^(?:(?:\\\\|\\["]|[^"])+)/i,/^(?:")/i,/^(?:$)/i,/^(?:.)/i,/^(?:.)/i,/^(?:.)/i,/^(?:.)/i,/^(?:.)/i,/^(?:.)/i,/^(?:.)/i],
conditions: {"hdfs":{"rules":[117,118,119,120,121,122,164],"inclusive":false},"doubleQuotedValue":{"rules":[159,160,167],"inclusive":false},"singleQuotedValue":{"rules":[156,157,166],"inclusive":false},"backtickedValue":{"rules":[153,154,165],"inclusive":false},"between":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,155,158,161,162,163,168],"inclusive":true},"INITIAL":{"rules":[0,1,2,3,4,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,155,158,161,162,168],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();
export default databricksSyntaxParser;
